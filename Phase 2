{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Traffic Crashes in Chicago**"
      ],
      "metadata": {
        "id": "87pKQY2et4U2"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vaqy0dtaWeKv"
      },
      "source": [
        "Group 1: Claire Chang, Shreeja Nanda, Koshal Raghavarapu, Saurabh Saoji, Gargi Vaidya"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Our dataset shows information about each traffic crash on city streets within the City of Chicago limits and under the jurisdiction of Chicago Police Department (CPD). It involves a total of 48 features such as the crash time, location and other information, and the dataset is updated every 24 hours."
      ],
      "metadata": {
        "id": "lawpTFQxtx9u"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M3ZkQbM70rU8"
      },
      "source": [
        "Dataset: https://dev.socrata.com/foundry/data.cityofchicago.org/85ca-t3if"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zbsyTiaQhehh",
        "outputId": "52817c74-a7b1-4025-98ce-5348d3a4928d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.8/dist-packages (5.5.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.8/dist-packages (from plotly) (1.15.0)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.8/dist-packages (from plotly) (8.1.0)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: cartopy in /usr/local/lib/python3.8/dist-packages (0.19.0.post1)\n",
            "Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.8/dist-packages (from cartopy) (1.21.6)\n",
            "Requirement already satisfied: shapely>=1.5.6 in /usr/local/lib/python3.8/dist-packages (from cartopy) (1.8.5.post1)\n",
            "Requirement already satisfied: pyshp>=2 in /usr/local/lib/python3.8/dist-packages (from cartopy) (2.3.1)\n"
          ]
        }
      ],
      "source": [
        "!pip install plotly\n",
        "!pip install cartopy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tIZhC4dGCa3B"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lTxTmcBbYPqp"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "import cartopy.crs as crs\n",
        "import cartopy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O9eao02OYQON"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RcHWJDsDEgqc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 835
        },
        "outputId": "e88db958-65be-47c6-8c3c-a7c7dc6df75d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                          CRASH_RECORD_ID     RD_NO  \\\n",
              "0       79c7a2ce89f446262efd86df3d72d18b04ba487024b7c4...  JC199149   \n",
              "1       792b539deaaad65ee5b4a9691d927a34d298eb33d42af0...  JB422857   \n",
              "2       0115ade9a755e835255508463f7e9c4a9a0b47e9304238...  JF318029   \n",
              "3       05b1982cdba5d8a00e7e76ad1ecdab0e598429f78481d2...  JF378711   \n",
              "4       017040c61958d2fa977c956b2bd2d6759ef7754496dc96...  JF324552   \n",
              "...                                                   ...       ...   \n",
              "678610  19d66ccf73917206f2e91092e8976a300b1f84daa8833e...  JF485903   \n",
              "678611  58836410941fb22412eaeaf1e8111f5d3c0ab0c68fd155...  JF486428   \n",
              "678612  8588fb5bf485485db492c6d13fc5d2ae8f722ef423e7e1...  JF489379   \n",
              "678613  9ca7bae9fb525af43c3919614b5b4627fbbbcad68055e6...  JF486190   \n",
              "678614  b93c225fa3fab962a186c30a442c0d581e03dbfa47cf99...  JF486505   \n",
              "\n",
              "       CRASH_DATE_EST_I              CRASH_DATE  POSTED_SPEED_LIMIT  \\\n",
              "0                   NaN  03/25/2019 02:43:00 PM                  30   \n",
              "1                   NaN  09/05/2018 08:40:00 AM                  30   \n",
              "2                   NaN  07/15/2022 12:45:00 AM                  30   \n",
              "3                   NaN  08/29/2022 11:30:00 AM                  30   \n",
              "4                   NaN  07/15/2022 06:50:00 PM                  30   \n",
              "...                 ...                     ...                 ...   \n",
              "678610              NaN  11/24/2022 12:01:00 AM                  30   \n",
              "678611              NaN  11/24/2022 03:50:00 PM                  30   \n",
              "678612              NaN  11/24/2022 01:00:00 PM                  30   \n",
              "678613              NaN  11/24/2022 06:47:00 AM                  10   \n",
              "678614              NaN  11/24/2022 04:40:00 PM                  30   \n",
              "\n",
              "       TRAFFIC_CONTROL_DEVICE      DEVICE_CONDITION WEATHER_CONDITION  \\\n",
              "0              TRAFFIC SIGNAL  FUNCTIONING PROPERLY             CLEAR   \n",
              "1                 NO CONTROLS           NO CONTROLS             CLEAR   \n",
              "2                     UNKNOWN               UNKNOWN             CLEAR   \n",
              "3              TRAFFIC SIGNAL  FUNCTIONING PROPERLY             CLEAR   \n",
              "4              TRAFFIC SIGNAL  FUNCTIONING PROPERLY             CLEAR   \n",
              "...                       ...                   ...               ...   \n",
              "678610      STOP SIGN/FLASHER  FUNCTIONING PROPERLY             CLEAR   \n",
              "678611            NO CONTROLS           NO CONTROLS   CLOUDY/OVERCAST   \n",
              "678612         TRAFFIC SIGNAL  FUNCTIONING PROPERLY             CLEAR   \n",
              "678613            NO CONTROLS           NO CONTROLS             CLEAR   \n",
              "678614            NO CONTROLS           NO CONTROLS             CLEAR   \n",
              "\n",
              "            LIGHTING_CONDITION      FIRST_CRASH_TYPE  ...  \\\n",
              "0                     DAYLIGHT               TURNING  ...   \n",
              "1                     DAYLIGHT                 ANGLE  ...   \n",
              "2       DARKNESS, LIGHTED ROAD                 ANGLE  ...   \n",
              "3                     DAYLIGHT              REAR END  ...   \n",
              "4                     DAYLIGHT              REAR END  ...   \n",
              "...                        ...                   ...  ...   \n",
              "678610  DARKNESS, LIGHTED ROAD  PARKED MOTOR VEHICLE  ...   \n",
              "678611                DAYLIGHT  PARKED MOTOR VEHICLE  ...   \n",
              "678612                DAYLIGHT               TURNING  ...   \n",
              "678613                DAYLIGHT  PARKED MOTOR VEHICLE  ...   \n",
              "678614                    DAWN  PARKED MOTOR VEHICLE  ...   \n",
              "\n",
              "       INJURIES_NON_INCAPACITATING  INJURIES_REPORTED_NOT_EVIDENT  \\\n",
              "0                              0.0                            1.0   \n",
              "1                              0.0                            0.0   \n",
              "2                              0.0                            0.0   \n",
              "3                              0.0                            0.0   \n",
              "4                              0.0                            0.0   \n",
              "...                            ...                            ...   \n",
              "678610                         0.0                            0.0   \n",
              "678611                         0.0                            0.0   \n",
              "678612                         0.0                            0.0   \n",
              "678613                         0.0                            0.0   \n",
              "678614                         0.0                            0.0   \n",
              "\n",
              "       INJURIES_NO_INDICATION INJURIES_UNKNOWN CRASH_HOUR CRASH_DAY_OF_WEEK  \\\n",
              "0                         2.0              0.0         14                 2   \n",
              "1                         2.0              0.0          8                 4   \n",
              "2                         2.0              0.0          0                 6   \n",
              "3                         3.0              0.0         11                 2   \n",
              "4                         2.0              0.0         18                 6   \n",
              "...                       ...              ...        ...               ...   \n",
              "678610                    2.0              0.0          0                 5   \n",
              "678611                    1.0              0.0         15                 5   \n",
              "678612                    2.0              0.0         13                 5   \n",
              "678613                    1.0              0.0          6                 5   \n",
              "678614                    4.0              0.0         16                 5   \n",
              "\n",
              "       CRASH_MONTH   LATITUDE  LONGITUDE  \\\n",
              "0                3  41.884547 -87.641201   \n",
              "1                9  41.968562 -87.740659   \n",
              "2                7  41.886336 -87.716203   \n",
              "3                8  41.749348 -87.721097   \n",
              "4                7  41.925111 -87.667997   \n",
              "...            ...        ...        ...   \n",
              "678610          11  41.868114 -87.705847   \n",
              "678611          11  41.686263 -87.664858   \n",
              "678612          11  41.985267 -87.662517   \n",
              "678613          11  41.874644 -87.629649   \n",
              "678614          11  41.821258 -87.701873   \n",
              "\n",
              "                                        LOCATION  \n",
              "0        POINT (-87.64120093714 41.884547224337)  \n",
              "1       POINT (-87.740659314632 41.968562453871)  \n",
              "2       POINT (-87.716203130599 41.886336409761)  \n",
              "3       POINT (-87.721096727406 41.749348170421)  \n",
              "4       POINT (-87.667997321599 41.925110815832)  \n",
              "...                                          ...  \n",
              "678610  POINT (-87.705846742577 41.868113701907)  \n",
              "678611  POINT (-87.664858007912 41.686263191946)  \n",
              "678612  POINT (-87.662516804053 41.985266769831)  \n",
              "678613  POINT (-87.629648503841 41.874644283241)  \n",
              "678614  POINT (-87.701872610186 41.821258423603)  \n",
              "\n",
              "[678615 rows x 49 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ee3985e9-7400-4808-b36d-7e998e6a5090\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CRASH_RECORD_ID</th>\n",
              "      <th>RD_NO</th>\n",
              "      <th>CRASH_DATE_EST_I</th>\n",
              "      <th>CRASH_DATE</th>\n",
              "      <th>POSTED_SPEED_LIMIT</th>\n",
              "      <th>TRAFFIC_CONTROL_DEVICE</th>\n",
              "      <th>DEVICE_CONDITION</th>\n",
              "      <th>WEATHER_CONDITION</th>\n",
              "      <th>LIGHTING_CONDITION</th>\n",
              "      <th>FIRST_CRASH_TYPE</th>\n",
              "      <th>...</th>\n",
              "      <th>INJURIES_NON_INCAPACITATING</th>\n",
              "      <th>INJURIES_REPORTED_NOT_EVIDENT</th>\n",
              "      <th>INJURIES_NO_INDICATION</th>\n",
              "      <th>INJURIES_UNKNOWN</th>\n",
              "      <th>CRASH_HOUR</th>\n",
              "      <th>CRASH_DAY_OF_WEEK</th>\n",
              "      <th>CRASH_MONTH</th>\n",
              "      <th>LATITUDE</th>\n",
              "      <th>LONGITUDE</th>\n",
              "      <th>LOCATION</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>79c7a2ce89f446262efd86df3d72d18b04ba487024b7c4...</td>\n",
              "      <td>JC199149</td>\n",
              "      <td>NaN</td>\n",
              "      <td>03/25/2019 02:43:00 PM</td>\n",
              "      <td>30</td>\n",
              "      <td>TRAFFIC SIGNAL</td>\n",
              "      <td>FUNCTIONING PROPERLY</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>TURNING</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>41.884547</td>\n",
              "      <td>-87.641201</td>\n",
              "      <td>POINT (-87.64120093714 41.884547224337)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>792b539deaaad65ee5b4a9691d927a34d298eb33d42af0...</td>\n",
              "      <td>JB422857</td>\n",
              "      <td>NaN</td>\n",
              "      <td>09/05/2018 08:40:00 AM</td>\n",
              "      <td>30</td>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>ANGLE</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>41.968562</td>\n",
              "      <td>-87.740659</td>\n",
              "      <td>POINT (-87.740659314632 41.968562453871)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0115ade9a755e835255508463f7e9c4a9a0b47e9304238...</td>\n",
              "      <td>JF318029</td>\n",
              "      <td>NaN</td>\n",
              "      <td>07/15/2022 12:45:00 AM</td>\n",
              "      <td>30</td>\n",
              "      <td>UNKNOWN</td>\n",
              "      <td>UNKNOWN</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DARKNESS, LIGHTED ROAD</td>\n",
              "      <td>ANGLE</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>41.886336</td>\n",
              "      <td>-87.716203</td>\n",
              "      <td>POINT (-87.716203130599 41.886336409761)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>05b1982cdba5d8a00e7e76ad1ecdab0e598429f78481d2...</td>\n",
              "      <td>JF378711</td>\n",
              "      <td>NaN</td>\n",
              "      <td>08/29/2022 11:30:00 AM</td>\n",
              "      <td>30</td>\n",
              "      <td>TRAFFIC SIGNAL</td>\n",
              "      <td>FUNCTIONING PROPERLY</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>REAR END</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>41.749348</td>\n",
              "      <td>-87.721097</td>\n",
              "      <td>POINT (-87.721096727406 41.749348170421)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>017040c61958d2fa977c956b2bd2d6759ef7754496dc96...</td>\n",
              "      <td>JF324552</td>\n",
              "      <td>NaN</td>\n",
              "      <td>07/15/2022 06:50:00 PM</td>\n",
              "      <td>30</td>\n",
              "      <td>TRAFFIC SIGNAL</td>\n",
              "      <td>FUNCTIONING PROPERLY</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>REAR END</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>18</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>41.925111</td>\n",
              "      <td>-87.667997</td>\n",
              "      <td>POINT (-87.667997321599 41.925110815832)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678610</th>\n",
              "      <td>19d66ccf73917206f2e91092e8976a300b1f84daa8833e...</td>\n",
              "      <td>JF485903</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11/24/2022 12:01:00 AM</td>\n",
              "      <td>30</td>\n",
              "      <td>STOP SIGN/FLASHER</td>\n",
              "      <td>FUNCTIONING PROPERLY</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DARKNESS, LIGHTED ROAD</td>\n",
              "      <td>PARKED MOTOR VEHICLE</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "      <td>41.868114</td>\n",
              "      <td>-87.705847</td>\n",
              "      <td>POINT (-87.705846742577 41.868113701907)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678611</th>\n",
              "      <td>58836410941fb22412eaeaf1e8111f5d3c0ab0c68fd155...</td>\n",
              "      <td>JF486428</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11/24/2022 03:50:00 PM</td>\n",
              "      <td>30</td>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>CLOUDY/OVERCAST</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>PARKED MOTOR VEHICLE</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>15</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "      <td>41.686263</td>\n",
              "      <td>-87.664858</td>\n",
              "      <td>POINT (-87.664858007912 41.686263191946)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678612</th>\n",
              "      <td>8588fb5bf485485db492c6d13fc5d2ae8f722ef423e7e1...</td>\n",
              "      <td>JF489379</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11/24/2022 01:00:00 PM</td>\n",
              "      <td>30</td>\n",
              "      <td>TRAFFIC SIGNAL</td>\n",
              "      <td>FUNCTIONING PROPERLY</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>TURNING</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "      <td>41.985267</td>\n",
              "      <td>-87.662517</td>\n",
              "      <td>POINT (-87.662516804053 41.985266769831)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678613</th>\n",
              "      <td>9ca7bae9fb525af43c3919614b5b4627fbbbcad68055e6...</td>\n",
              "      <td>JF486190</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11/24/2022 06:47:00 AM</td>\n",
              "      <td>10</td>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>PARKED MOTOR VEHICLE</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "      <td>41.874644</td>\n",
              "      <td>-87.629649</td>\n",
              "      <td>POINT (-87.629648503841 41.874644283241)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678614</th>\n",
              "      <td>b93c225fa3fab962a186c30a442c0d581e03dbfa47cf99...</td>\n",
              "      <td>JF486505</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11/24/2022 04:40:00 PM</td>\n",
              "      <td>30</td>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAWN</td>\n",
              "      <td>PARKED MOTOR VEHICLE</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "      <td>41.821258</td>\n",
              "      <td>-87.701873</td>\n",
              "      <td>POINT (-87.701872610186 41.821258423603)</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>678615 rows × 49 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee3985e9-7400-4808-b36d-7e998e6a5090')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ee3985e9-7400-4808-b36d-7e998e6a5090 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ee3985e9-7400-4808-b36d-7e998e6a5090');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ],
      "source": [
        "df = pd.read_csv('https://data.cityofchicago.org/api/views/85ca-t3if/rows.csv')\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dPJ4QL3bWqei",
        "outputId": "739a7614-c32e-48df-d284-3efdd99dab66"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 678615 entries, 0 to 678614\n",
            "Data columns (total 49 columns):\n",
            " #   Column                         Non-Null Count   Dtype  \n",
            "---  ------                         --------------   -----  \n",
            " 0   CRASH_RECORD_ID                678615 non-null  object \n",
            " 1   RD_NO                          674551 non-null  object \n",
            " 2   CRASH_DATE_EST_I               51410 non-null   object \n",
            " 3   CRASH_DATE                     678615 non-null  object \n",
            " 4   POSTED_SPEED_LIMIT             678615 non-null  int64  \n",
            " 5   TRAFFIC_CONTROL_DEVICE         678615 non-null  object \n",
            " 6   DEVICE_CONDITION               678615 non-null  object \n",
            " 7   WEATHER_CONDITION              678615 non-null  object \n",
            " 8   LIGHTING_CONDITION             678615 non-null  object \n",
            " 9   FIRST_CRASH_TYPE               678615 non-null  object \n",
            " 10  TRAFFICWAY_TYPE                678615 non-null  object \n",
            " 11  LANE_CNT                       198996 non-null  float64\n",
            " 12  ALIGNMENT                      678615 non-null  object \n",
            " 13  ROADWAY_SURFACE_COND           678615 non-null  object \n",
            " 14  ROAD_DEFECT                    678615 non-null  object \n",
            " 15  REPORT_TYPE                    660224 non-null  object \n",
            " 16  CRASH_TYPE                     678615 non-null  object \n",
            " 17  INTERSECTION_RELATED_I         155410 non-null  object \n",
            " 18  NOT_RIGHT_OF_WAY_I             31833 non-null   object \n",
            " 19  HIT_AND_RUN_I                  210149 non-null  object \n",
            " 20  DAMAGE                         678615 non-null  object \n",
            " 21  DATE_POLICE_NOTIFIED           678615 non-null  object \n",
            " 22  PRIM_CONTRIBUTORY_CAUSE        678615 non-null  object \n",
            " 23  SEC_CONTRIBUTORY_CAUSE         678615 non-null  object \n",
            " 24  STREET_NO                      678615 non-null  int64  \n",
            " 25  STREET_DIRECTION               678611 non-null  object \n",
            " 26  STREET_NAME                    678614 non-null  object \n",
            " 27  BEAT_OF_OCCURRENCE             678610 non-null  float64\n",
            " 28  PHOTOS_TAKEN_I                 8382 non-null    object \n",
            " 29  STATEMENTS_TAKEN_I             14129 non-null   object \n",
            " 30  DOORING_I                      2118 non-null    object \n",
            " 31  WORK_ZONE_I                    4001 non-null    object \n",
            " 32  WORK_ZONE_TYPE                 3139 non-null    object \n",
            " 33  WORKERS_PRESENT_I              1038 non-null    object \n",
            " 34  NUM_UNITS                      678615 non-null  int64  \n",
            " 35  MOST_SEVERE_INJURY             677141 non-null  object \n",
            " 36  INJURIES_TOTAL                 677152 non-null  float64\n",
            " 37  INJURIES_FATAL                 677152 non-null  float64\n",
            " 38  INJURIES_INCAPACITATING        677152 non-null  float64\n",
            " 39  INJURIES_NON_INCAPACITATING    677152 non-null  float64\n",
            " 40  INJURIES_REPORTED_NOT_EVIDENT  677152 non-null  float64\n",
            " 41  INJURIES_NO_INDICATION         677152 non-null  float64\n",
            " 42  INJURIES_UNKNOWN               677152 non-null  float64\n",
            " 43  CRASH_HOUR                     678615 non-null  int64  \n",
            " 44  CRASH_DAY_OF_WEEK              678615 non-null  int64  \n",
            " 45  CRASH_MONTH                    678615 non-null  int64  \n",
            " 46  LATITUDE                       674345 non-null  float64\n",
            " 47  LONGITUDE                      674345 non-null  float64\n",
            " 48  LOCATION                       674345 non-null  object \n",
            "dtypes: float64(11), int64(6), object(32)\n",
            "memory usage: 253.7+ MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QiBtjXuZEmyB",
        "outputId": "49f36c55-a87d-4378-cfd9-6ac03d124ece"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 654598 entries, 0 to 678614\n",
            "Data columns (total 37 columns):\n",
            " #   Column                         Non-Null Count   Dtype  \n",
            "---  ------                         --------------   -----  \n",
            " 0   CRASH_RECORD_ID                654598 non-null  object \n",
            " 1   CRASH_DATE                     654598 non-null  object \n",
            " 2   POSTED_SPEED_LIMIT             654598 non-null  int64  \n",
            " 3   TRAFFIC_CONTROL_DEVICE         654598 non-null  object \n",
            " 4   DEVICE_CONDITION               654598 non-null  object \n",
            " 5   WEATHER_CONDITION              654598 non-null  object \n",
            " 6   LIGHTING_CONDITION             654598 non-null  object \n",
            " 7   FIRST_CRASH_TYPE               654598 non-null  object \n",
            " 8   TRAFFICWAY_TYPE                654598 non-null  object \n",
            " 9   ALIGNMENT                      654598 non-null  object \n",
            " 10  ROADWAY_SURFACE_COND           654598 non-null  object \n",
            " 11  ROAD_DEFECT                    654598 non-null  object \n",
            " 12  REPORT_TYPE                    654598 non-null  object \n",
            " 13  CRASH_TYPE                     654598 non-null  object \n",
            " 14  DAMAGE                         654598 non-null  object \n",
            " 15  DATE_POLICE_NOTIFIED           654598 non-null  object \n",
            " 16  PRIM_CONTRIBUTORY_CAUSE        654598 non-null  object \n",
            " 17  SEC_CONTRIBUTORY_CAUSE         654598 non-null  object \n",
            " 18  STREET_NO                      654598 non-null  int64  \n",
            " 19  STREET_DIRECTION               654598 non-null  object \n",
            " 20  STREET_NAME                    654598 non-null  object \n",
            " 21  BEAT_OF_OCCURRENCE             654598 non-null  float64\n",
            " 22  NUM_UNITS                      654598 non-null  int64  \n",
            " 23  MOST_SEVERE_INJURY             654598 non-null  object \n",
            " 24  INJURIES_TOTAL                 654598 non-null  float64\n",
            " 25  INJURIES_FATAL                 654598 non-null  float64\n",
            " 26  INJURIES_INCAPACITATING        654598 non-null  float64\n",
            " 27  INJURIES_NON_INCAPACITATING    654598 non-null  float64\n",
            " 28  INJURIES_REPORTED_NOT_EVIDENT  654598 non-null  float64\n",
            " 29  INJURIES_NO_INDICATION         654598 non-null  float64\n",
            " 30  INJURIES_UNKNOWN               654598 non-null  float64\n",
            " 31  CRASH_HOUR                     654598 non-null  int64  \n",
            " 32  CRASH_DAY_OF_WEEK              654598 non-null  int64  \n",
            " 33  CRASH_MONTH                    654598 non-null  int64  \n",
            " 34  LATITUDE                       654598 non-null  float64\n",
            " 35  LONGITUDE                      654598 non-null  float64\n",
            " 36  LOCATION                       654598 non-null  object \n",
            "dtypes: float64(10), int64(6), object(21)\n",
            "memory usage: 189.8+ MB\n"
          ]
        }
      ],
      "source": [
        "df_clean2 = df.drop(columns = ['RD_NO', 'CRASH_DATE_EST_I', 'LANE_CNT', 'HIT_AND_RUN_I', 'INTERSECTION_RELATED_I', 'NOT_RIGHT_OF_WAY_I', 'PHOTOS_TAKEN_I', 'STATEMENTS_TAKEN_I', 'DOORING_I', 'WORK_ZONE_I', 'WORK_ZONE_TYPE', 'WORKERS_PRESENT_I'])\n",
        "df_clean2 = df_clean2.dropna()\n",
        "df_clean2.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g2r5JsIyU72K"
      },
      "source": [
        "# **Total Number of Reported Crashes**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "30Pe4rocTi57"
      },
      "source": [
        "This dataset has a **DATE** associated with every **CRASH**, which can be considered as an important piece of information as far as analyzing the data for insights goes. In this visualization, the question we have tried to answer is the number of crashes daily in the month of June in the year 2022."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lH7ZPHSi02Rz",
        "outputId": "0a2bfe30-486c-46c3-c36d-8541f94f3ead"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total Number of Reported Crashes: 654598\n"
          ]
        }
      ],
      "source": [
        "print('Total Number of Reported Crashes:', df_clean2['CRASH_RECORD_ID'].nunique())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "06acGQCivjgd"
      },
      "outputs": [],
      "source": [
        "sns.set_theme(style='darkgrid')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9naKndywvj-f"
      },
      "outputs": [],
      "source": [
        "df_clean2['CRASH_DATE'] = pd.to_datetime(df_clean2['CRASH_DATE'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mE4Ng2EcvxWS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 518
        },
        "outputId": "026bfe34-0cc2-4f37-f786-8a138e3ae9e1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "df_clean2['Day'] = df_clean2['CRASH_DATE'].dt.day\n",
        "df_reported_crashes=df_clean2[((df_clean2['CRASH_DATE'].dt.month==6) & (df_clean2['CRASH_DATE'].dt.year==2022))]\n",
        "plt.figure(figsize=(15,8))\n",
        "sns.set(style=\"whitegrid\", color_codes=True)\n",
        "data = df_reported_crashes.groupby('Day')['CRASH_RECORD_ID'].size()\n",
        "pal = sns.color_palette(\"rocket\", len(data))\n",
        "rank = data.argsort().argsort()\n",
        "sns.barplot(x=data.index, y=data, palette=np.array(pal[::-1])[rank], linewidth =0)\n",
        "plt.title('Number of crashes in Chicago in June 2022')\n",
        "plt.xlabel('Day of the month')\n",
        "plt.ylabel('Total number of crashes')\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r8hgf5pUVR4l"
      },
      "source": [
        "**About the Graph Above:**\n",
        "\n",
        "1.   Bar graph of number of crashes vs Day of the month\n",
        "2.   Month: June and Year: 2022 is hard coded\n",
        "3.   Color of the bars are proportional to the number of crashes. Darker the color, higher the number of crashes.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z4pG1Ze1Vz61"
      },
      "source": [
        "**Insights:**\n",
        "\n",
        "\n",
        "1.   The week of June 13-18 has all the darker bars\n",
        "2.   3rd and 17th June are the two days with most number of accidents, it is interesting to know that both are Fridays. \n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bmQiuz7-WiCb"
      },
      "source": [
        "**Future Scope:**\n",
        "\n",
        "Adding a dropdown which will enable the user to select the Year and/or Month they want to analyze."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xdutWFEdYvZB"
      },
      "source": [
        "# **Distribution of Primary Causes of Crash in Chicago**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U0khiz3lrHm3"
      },
      "source": [
        "For this visualization, we have plot the primary causes of crashes in Chicago in the form of a donut chart. This is an interactive visualization, wherein each sector displays the cause of crash, the total number of crashes and the percentage."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QoRyoH0R1WgJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "be93403c-2abe-4bf4-bd47-5e96510e41eb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 654598 entries, 0 to 678614\n",
            "Data columns (total 38 columns):\n",
            " #   Column                         Non-Null Count   Dtype         \n",
            "---  ------                         --------------   -----         \n",
            " 0   CRASH_RECORD_ID                654598 non-null  object        \n",
            " 1   CRASH_DATE                     654598 non-null  datetime64[ns]\n",
            " 2   POSTED_SPEED_LIMIT             654598 non-null  int64         \n",
            " 3   TRAFFIC_CONTROL_DEVICE         654598 non-null  object        \n",
            " 4   DEVICE_CONDITION               654598 non-null  object        \n",
            " 5   WEATHER_CONDITION              654598 non-null  object        \n",
            " 6   LIGHTING_CONDITION             654598 non-null  object        \n",
            " 7   FIRST_CRASH_TYPE               654598 non-null  object        \n",
            " 8   TRAFFICWAY_TYPE                654598 non-null  object        \n",
            " 9   ALIGNMENT                      654598 non-null  object        \n",
            " 10  ROADWAY_SURFACE_COND           654598 non-null  object        \n",
            " 11  ROAD_DEFECT                    654598 non-null  object        \n",
            " 12  REPORT_TYPE                    654598 non-null  object        \n",
            " 13  CRASH_TYPE                     654598 non-null  object        \n",
            " 14  DAMAGE                         654598 non-null  object        \n",
            " 15  DATE_POLICE_NOTIFIED           654598 non-null  object        \n",
            " 16  PRIM_CONTRIBUTORY_CAUSE        654598 non-null  object        \n",
            " 17  SEC_CONTRIBUTORY_CAUSE         654598 non-null  object        \n",
            " 18  STREET_NO                      654598 non-null  int64         \n",
            " 19  STREET_DIRECTION               654598 non-null  object        \n",
            " 20  STREET_NAME                    654598 non-null  object        \n",
            " 21  BEAT_OF_OCCURRENCE             654598 non-null  float64       \n",
            " 22  NUM_UNITS                      654598 non-null  int64         \n",
            " 23  MOST_SEVERE_INJURY             654598 non-null  object        \n",
            " 24  INJURIES_TOTAL                 654598 non-null  float64       \n",
            " 25  INJURIES_FATAL                 654598 non-null  float64       \n",
            " 26  INJURIES_INCAPACITATING        654598 non-null  float64       \n",
            " 27  INJURIES_NON_INCAPACITATING    654598 non-null  float64       \n",
            " 28  INJURIES_REPORTED_NOT_EVIDENT  654598 non-null  float64       \n",
            " 29  INJURIES_NO_INDICATION         654598 non-null  float64       \n",
            " 30  INJURIES_UNKNOWN               654598 non-null  float64       \n",
            " 31  CRASH_HOUR                     654598 non-null  int64         \n",
            " 32  CRASH_DAY_OF_WEEK              654598 non-null  int64         \n",
            " 33  CRASH_MONTH                    654598 non-null  int64         \n",
            " 34  LATITUDE                       654598 non-null  float64       \n",
            " 35  LONGITUDE                      654598 non-null  float64       \n",
            " 36  LOCATION                       654598 non-null  object        \n",
            " 37  Day                            654598 non-null  int64         \n",
            "dtypes: datetime64[ns](1), float64(10), int64(7), object(20)\n",
            "memory usage: 194.8+ MB\n"
          ]
        }
      ],
      "source": [
        "df_clean2.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "T1vx-Nnr0wN3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 589
        },
        "outputId": "bfacc0a0-d6cb-42b1-a7be-6fb91d9aad99"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            DEVICE_CONDITION WEATHER_CONDITION      LIGHTING_CONDITION  \\\n",
              "0       FUNCTIONING PROPERLY             CLEAR                DAYLIGHT   \n",
              "1                NO CONTROLS             CLEAR                DAYLIGHT   \n",
              "2                    UNKNOWN             CLEAR  DARKNESS, LIGHTED ROAD   \n",
              "3       FUNCTIONING PROPERLY             CLEAR                DAYLIGHT   \n",
              "4       FUNCTIONING PROPERLY             CLEAR                DAYLIGHT   \n",
              "...                      ...               ...                     ...   \n",
              "678610  FUNCTIONING PROPERLY             CLEAR  DARKNESS, LIGHTED ROAD   \n",
              "678611           NO CONTROLS   CLOUDY/OVERCAST                DAYLIGHT   \n",
              "678612  FUNCTIONING PROPERLY             CLEAR                DAYLIGHT   \n",
              "678613           NO CONTROLS             CLEAR                DAYLIGHT   \n",
              "678614           NO CONTROLS             CLEAR                    DAWN   \n",
              "\n",
              "                                  PRIM_CONTRIBUTORY_CAUSE  \\\n",
              "0                              IMPROPER TURNING/NO SIGNAL   \n",
              "1       VISION OBSCURED (SIGNS, TREE LIMBS, BUILDINGS,...   \n",
              "2                                     UNABLE TO DETERMINE   \n",
              "3                            DISREGARDING TRAFFIC SIGNALS   \n",
              "4                                     UNABLE TO DETERMINE   \n",
              "...                                                   ...   \n",
              "678610    HAD BEEN DRINKING (USE WHEN ARREST IS NOT MADE)   \n",
              "678611                                   IMPROPER BACKING   \n",
              "678612                                UNABLE TO DETERMINE   \n",
              "678613                                UNABLE TO DETERMINE   \n",
              "678614                                UNABLE TO DETERMINE   \n",
              "\n",
              "                     SEC_CONTRIBUTORY_CAUSE  \n",
              "0       DRIVING SKILLS/KNOWLEDGE/EXPERIENCE  \n",
              "1             FAILING TO YIELD RIGHT-OF-WAY  \n",
              "2                       UNABLE TO DETERMINE  \n",
              "3                            NOT APPLICABLE  \n",
              "4                       UNABLE TO DETERMINE  \n",
              "...                                     ...  \n",
              "678610                  UNABLE TO DETERMINE  \n",
              "678611                  UNABLE TO DETERMINE  \n",
              "678612                       NOT APPLICABLE  \n",
              "678613                       NOT APPLICABLE  \n",
              "678614                       NOT APPLICABLE  \n",
              "\n",
              "[654598 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8c8de625-06e2-4c7e-a50a-4e5a87acffef\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DEVICE_CONDITION</th>\n",
              "      <th>WEATHER_CONDITION</th>\n",
              "      <th>LIGHTING_CONDITION</th>\n",
              "      <th>PRIM_CONTRIBUTORY_CAUSE</th>\n",
              "      <th>SEC_CONTRIBUTORY_CAUSE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FUNCTIONING PROPERLY</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>IMPROPER TURNING/NO SIGNAL</td>\n",
              "      <td>DRIVING SKILLS/KNOWLEDGE/EXPERIENCE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>VISION OBSCURED (SIGNS, TREE LIMBS, BUILDINGS,...</td>\n",
              "      <td>FAILING TO YIELD RIGHT-OF-WAY</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>UNKNOWN</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DARKNESS, LIGHTED ROAD</td>\n",
              "      <td>UNABLE TO DETERMINE</td>\n",
              "      <td>UNABLE TO DETERMINE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>FUNCTIONING PROPERLY</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>DISREGARDING TRAFFIC SIGNALS</td>\n",
              "      <td>NOT APPLICABLE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>FUNCTIONING PROPERLY</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>UNABLE TO DETERMINE</td>\n",
              "      <td>UNABLE TO DETERMINE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678610</th>\n",
              "      <td>FUNCTIONING PROPERLY</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DARKNESS, LIGHTED ROAD</td>\n",
              "      <td>HAD BEEN DRINKING (USE WHEN ARREST IS NOT MADE)</td>\n",
              "      <td>UNABLE TO DETERMINE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678611</th>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>CLOUDY/OVERCAST</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>IMPROPER BACKING</td>\n",
              "      <td>UNABLE TO DETERMINE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678612</th>\n",
              "      <td>FUNCTIONING PROPERLY</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>UNABLE TO DETERMINE</td>\n",
              "      <td>NOT APPLICABLE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678613</th>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAYLIGHT</td>\n",
              "      <td>UNABLE TO DETERMINE</td>\n",
              "      <td>NOT APPLICABLE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>678614</th>\n",
              "      <td>NO CONTROLS</td>\n",
              "      <td>CLEAR</td>\n",
              "      <td>DAWN</td>\n",
              "      <td>UNABLE TO DETERMINE</td>\n",
              "      <td>NOT APPLICABLE</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>654598 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c8de625-06e2-4c7e-a50a-4e5a87acffef')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8c8de625-06e2-4c7e-a50a-4e5a87acffef button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8c8de625-06e2-4c7e-a50a-4e5a87acffef');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ],
      "source": [
        "sub1 = df_clean2[['DEVICE_CONDITION', 'WEATHER_CONDITION', 'LIGHTING_CONDITION', 'PRIM_CONTRIBUTORY_CAUSE', 'SEC_CONTRIBUTORY_CAUSE']]\n",
        "sub1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rf7kmA7F1mRM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d19d8563-5ddd-48f4-a30d-7f79e17d0362"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "UNABLE TO DETERMINE                                                                 251133\n",
              "FAILING TO YIELD RIGHT-OF-WAY                                                        71210\n",
              "FOLLOWING TOO CLOSELY                                                                65929\n",
              "NOT APPLICABLE                                                                       34362\n",
              "IMPROPER OVERTAKING/PASSING                                                          31634\n",
              "FAILING TO REDUCE SPEED TO AVOID CRASH                                               28078\n",
              "IMPROPER BACKING                                                                     27052\n",
              "IMPROPER LANE USAGE                                                                  24096\n",
              "IMPROPER TURNING/NO SIGNAL                                                           21616\n",
              "DRIVING SKILLS/KNOWLEDGE/EXPERIENCE                                                  21240\n",
              "DISREGARDING TRAFFIC SIGNALS                                                         12471\n",
              "WEATHER                                                                              10185\n",
              "OPERATING VEHICLE IN ERRATIC, RECKLESS, CARELESS, NEGLIGENT OR AGGRESSIVE MANNER      8256\n",
              "DISREGARDING STOP SIGN                                                                7254\n",
              "DISTRACTION - FROM INSIDE VEHICLE                                                     4641\n",
              "EQUIPMENT - VEHICLE CONDITION                                                         4154\n",
              "PHYSICAL CONDITION OF DRIVER                                                          4001\n",
              "VISION OBSCURED (SIGNS, TREE LIMBS, BUILDINGS, ETC.)                                  3790\n",
              "DRIVING ON WRONG SIDE/WRONG WAY                                                       3288\n",
              "UNDER THE INFLUENCE OF ALCOHOL/DRUGS (USE WHEN ARREST IS EFFECTED)                    3187\n",
              "DISTRACTION - FROM OUTSIDE VEHICLE                                                    2817\n",
              "EXCEEDING AUTHORIZED SPEED LIMIT                                                      1878\n",
              "ROAD ENGINEERING/SURFACE/MARKING DEFECTS                                              1730\n",
              "EXCEEDING SAFE SPEED FOR CONDITIONS                                                   1638\n",
              "ROAD CONSTRUCTION/MAINTENANCE                                                         1494\n",
              "DISREGARDING OTHER TRAFFIC SIGNS                                                      1416\n",
              "EVASIVE ACTION DUE TO ANIMAL, OBJECT, NONMOTORIST                                     1252\n",
              "CELL PHONE USE OTHER THAN TEXTING                                                      901\n",
              "DISREGARDING ROAD MARKINGS                                                             857\n",
              "HAD BEEN DRINKING (USE WHEN ARREST IS NOT MADE)                                        695\n",
              "ANIMAL                                                                                 556\n",
              "TURNING RIGHT ON RED                                                                   456\n",
              "DISTRACTION - OTHER ELECTRONIC DEVICE (NAVIGATION DEVICE, DVD PLAYER, ETC.)            320\n",
              "RELATED TO BUS STOP                                                                    274\n",
              "TEXTING                                                                                272\n",
              "DISREGARDING YIELD SIGN                                                                229\n",
              "PASSING STOPPED SCHOOL BUS                                                              85\n",
              "BICYCLE ADVANCING LEGALLY ON RED LIGHT                                                  72\n",
              "OBSTRUCTED CROSSWALKS                                                                   61\n",
              "MOTORCYCLE ADVANCING LEGALLY ON RED LIGHT                                               18\n",
              "Name: PRIM_CONTRIBUTORY_CAUSE, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ],
      "source": [
        "df_clean2['PRIM_CONTRIBUTORY_CAUSE'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ku_ziPwM2u5L",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "faf9ecbf-2cb3-4aa0-f771-f14b5083d6ae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py:4906: SettingWithCopyWarning:\n",
            "\n",
            "\n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FAILING TO YIELD RIGHT-OF-WAY                                                       71210\n",
              "FOLLOWING TOO CLOSELY                                                               65929\n",
              "IMPROPER OVERTAKING/PASSING                                                         31634\n",
              "FAILING TO REDUCE SPEED TO AVOID CRASH                                              28078\n",
              "IMPROPER BACKING                                                                    27052\n",
              "IMPROPER LANE USAGE                                                                 24096\n",
              "IMPROPER TURNING/NO SIGNAL                                                          21616\n",
              "DRIVING SKILLS/KNOWLEDGE/EXPERIENCE                                                 21240\n",
              "DISREGARDING TRAFFIC SIGNALS                                                        12471\n",
              "WEATHER                                                                             10185\n",
              "OPERATING VEHICLE IN ERRATIC, RECKLESS, CARELESS, NEGLIGENT OR AGGRESSIVE MANNER     8256\n",
              "DISREGARDING STOP SIGN                                                               7254\n",
              "DISTRACTION - FROM INSIDE VEHICLE                                                    4641\n",
              "EQUIPMENT - VEHICLE CONDITION                                                        4154\n",
              "PHYSICAL CONDITION OF DRIVER                                                         4001\n",
              "VISION OBSCURED (SIGNS, TREE LIMBS, BUILDINGS, ETC.)                                 3790\n",
              "DRIVING ON WRONG SIDE/WRONG WAY                                                      3288\n",
              "UNDER THE INFLUENCE OF ALCOHOL/DRUGS (USE WHEN ARREST IS EFFECTED)                   3187\n",
              "DISTRACTION - FROM OUTSIDE VEHICLE                                                   2817\n",
              "EXCEEDING AUTHORIZED SPEED LIMIT                                                     1878\n",
              "ROAD ENGINEERING/SURFACE/MARKING DEFECTS                                             1730\n",
              "EXCEEDING SAFE SPEED FOR CONDITIONS                                                  1638\n",
              "ROAD CONSTRUCTION/MAINTENANCE                                                        1494\n",
              "DISREGARDING OTHER TRAFFIC SIGNS                                                     1416\n",
              "EVASIVE ACTION DUE TO ANIMAL, OBJECT, NONMOTORIST                                    1252\n",
              "CELL PHONE USE OTHER THAN TEXTING                                                     901\n",
              "DISREGARDING ROAD MARKINGS                                                            857\n",
              "HAD BEEN DRINKING (USE WHEN ARREST IS NOT MADE)                                       695\n",
              "ANIMAL                                                                                556\n",
              "TURNING RIGHT ON RED                                                                  456\n",
              "DISTRACTION - OTHER ELECTRONIC DEVICE (NAVIGATION DEVICE, DVD PLAYER, ETC.)           320\n",
              "RELATED TO BUS STOP                                                                   274\n",
              "TEXTING                                                                               272\n",
              "DISREGARDING YIELD SIGN                                                               229\n",
              "PASSING STOPPED SCHOOL BUS                                                             85\n",
              "BICYCLE ADVANCING LEGALLY ON RED LIGHT                                                 72\n",
              "OBSTRUCTED CROSSWALKS                                                                  61\n",
              "MOTORCYCLE ADVANCING LEGALLY ON RED LIGHT                                              18\n",
              "Name: PRIM_CONTRIBUTORY_CAUSE, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ],
      "source": [
        "sub1.drop(sub1[sub1.PRIM_CONTRIBUTORY_CAUSE == 'UNABLE TO DETERMINE'].index, inplace=True)\n",
        "sub1.drop(sub1[sub1.PRIM_CONTRIBUTORY_CAUSE == 'NOT APPLICABLE'].index, inplace=True)\n",
        "sub1['PRIM_CONTRIBUTORY_CAUSE'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5B5_c0QY36qk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "dc1551ca-6804-43f5-c314-6121c5afab2a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              PRIM_CONTRIBUTORY_CAUSE  Counts\n",
              "0                                              ANIMAL     556\n",
              "1              BICYCLE ADVANCING LEGALLY ON RED LIGHT      72\n",
              "2                   CELL PHONE USE OTHER THAN TEXTING     901\n",
              "3                    DISREGARDING OTHER TRAFFIC SIGNS    1416\n",
              "4                          DISREGARDING ROAD MARKINGS     857\n",
              "5                              DISREGARDING STOP SIGN    7254\n",
              "6                        DISREGARDING TRAFFIC SIGNALS   12471\n",
              "7                             DISREGARDING YIELD SIGN     229\n",
              "8                   DISTRACTION - FROM INSIDE VEHICLE    4641\n",
              "9                  DISTRACTION - FROM OUTSIDE VEHICLE    2817\n",
              "10  DISTRACTION - OTHER ELECTRONIC DEVICE (NAVIGAT...     320\n",
              "11                    DRIVING ON WRONG SIDE/WRONG WAY    3288\n",
              "12                DRIVING SKILLS/KNOWLEDGE/EXPERIENCE   21240\n",
              "13                      EQUIPMENT - VEHICLE CONDITION    4154\n",
              "14  EVASIVE ACTION DUE TO ANIMAL, OBJECT, NONMOTORIST    1252\n",
              "15                   EXCEEDING AUTHORIZED SPEED LIMIT    1878\n",
              "16                EXCEEDING SAFE SPEED FOR CONDITIONS    1638\n",
              "17             FAILING TO REDUCE SPEED TO AVOID CRASH   28078\n",
              "18                      FAILING TO YIELD RIGHT-OF-WAY   71210\n",
              "19                              FOLLOWING TOO CLOSELY   65929\n",
              "20    HAD BEEN DRINKING (USE WHEN ARREST IS NOT MADE)     695\n",
              "21                                   IMPROPER BACKING   27052\n",
              "22                                IMPROPER LANE USAGE   24096\n",
              "23                        IMPROPER OVERTAKING/PASSING   31634\n",
              "24                         IMPROPER TURNING/NO SIGNAL   21616\n",
              "25          MOTORCYCLE ADVANCING LEGALLY ON RED LIGHT      18\n",
              "26                              OBSTRUCTED CROSSWALKS      61\n",
              "27  OPERATING VEHICLE IN ERRATIC, RECKLESS, CARELE...    8256\n",
              "28                         PASSING STOPPED SCHOOL BUS      85\n",
              "29                       PHYSICAL CONDITION OF DRIVER    4001\n",
              "30                                RELATED TO BUS STOP     274\n",
              "31                      ROAD CONSTRUCTION/MAINTENANCE    1494\n",
              "32           ROAD ENGINEERING/SURFACE/MARKING DEFECTS    1730\n",
              "33                                            TEXTING     272\n",
              "34                               TURNING RIGHT ON RED     456\n",
              "35  UNDER THE INFLUENCE OF ALCOHOL/DRUGS (USE WHEN...    3187\n",
              "36  VISION OBSCURED (SIGNS, TREE LIMBS, BUILDINGS,...    3790\n",
              "37                                            WEATHER   10185"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-86a4ebe9-3e6e-446c-80d3-b3f91eb0b638\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PRIM_CONTRIBUTORY_CAUSE</th>\n",
              "      <th>Counts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ANIMAL</td>\n",
              "      <td>556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>BICYCLE ADVANCING LEGALLY ON RED LIGHT</td>\n",
              "      <td>72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>CELL PHONE USE OTHER THAN TEXTING</td>\n",
              "      <td>901</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>DISREGARDING OTHER TRAFFIC SIGNS</td>\n",
              "      <td>1416</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>DISREGARDING ROAD MARKINGS</td>\n",
              "      <td>857</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>DISREGARDING STOP SIGN</td>\n",
              "      <td>7254</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>DISREGARDING TRAFFIC SIGNALS</td>\n",
              "      <td>12471</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>DISREGARDING YIELD SIGN</td>\n",
              "      <td>229</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>DISTRACTION - FROM INSIDE VEHICLE</td>\n",
              "      <td>4641</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>DISTRACTION - FROM OUTSIDE VEHICLE</td>\n",
              "      <td>2817</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>DISTRACTION - OTHER ELECTRONIC DEVICE (NAVIGAT...</td>\n",
              "      <td>320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>DRIVING ON WRONG SIDE/WRONG WAY</td>\n",
              "      <td>3288</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>DRIVING SKILLS/KNOWLEDGE/EXPERIENCE</td>\n",
              "      <td>21240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>EQUIPMENT - VEHICLE CONDITION</td>\n",
              "      <td>4154</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>EVASIVE ACTION DUE TO ANIMAL, OBJECT, NONMOTORIST</td>\n",
              "      <td>1252</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>EXCEEDING AUTHORIZED SPEED LIMIT</td>\n",
              "      <td>1878</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>EXCEEDING SAFE SPEED FOR CONDITIONS</td>\n",
              "      <td>1638</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>FAILING TO REDUCE SPEED TO AVOID CRASH</td>\n",
              "      <td>28078</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>FAILING TO YIELD RIGHT-OF-WAY</td>\n",
              "      <td>71210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>FOLLOWING TOO CLOSELY</td>\n",
              "      <td>65929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>HAD BEEN DRINKING (USE WHEN ARREST IS NOT MADE)</td>\n",
              "      <td>695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>IMPROPER BACKING</td>\n",
              "      <td>27052</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>IMPROPER LANE USAGE</td>\n",
              "      <td>24096</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>IMPROPER OVERTAKING/PASSING</td>\n",
              "      <td>31634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>IMPROPER TURNING/NO SIGNAL</td>\n",
              "      <td>21616</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>MOTORCYCLE ADVANCING LEGALLY ON RED LIGHT</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>OBSTRUCTED CROSSWALKS</td>\n",
              "      <td>61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>OPERATING VEHICLE IN ERRATIC, RECKLESS, CARELE...</td>\n",
              "      <td>8256</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>PASSING STOPPED SCHOOL BUS</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>PHYSICAL CONDITION OF DRIVER</td>\n",
              "      <td>4001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>RELATED TO BUS STOP</td>\n",
              "      <td>274</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>ROAD CONSTRUCTION/MAINTENANCE</td>\n",
              "      <td>1494</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>ROAD ENGINEERING/SURFACE/MARKING DEFECTS</td>\n",
              "      <td>1730</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>TEXTING</td>\n",
              "      <td>272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>TURNING RIGHT ON RED</td>\n",
              "      <td>456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>UNDER THE INFLUENCE OF ALCOHOL/DRUGS (USE WHEN...</td>\n",
              "      <td>3187</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>VISION OBSCURED (SIGNS, TREE LIMBS, BUILDINGS,...</td>\n",
              "      <td>3790</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>WEATHER</td>\n",
              "      <td>10185</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86a4ebe9-3e6e-446c-80d3-b3f91eb0b638')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-86a4ebe9-3e6e-446c-80d3-b3f91eb0b638 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-86a4ebe9-3e6e-446c-80d3-b3f91eb0b638');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ],
      "source": [
        "prim_cause_df = (sub1.groupby([\"PRIM_CONTRIBUTORY_CAUSE\"]).size().reset_index(name=\"Counts\").sort_values(by=[\"PRIM_CONTRIBUTORY_CAUSE\"]))\n",
        "prim_cause_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ve2Bv9hi46FJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "outputId": "91c925fc-a7a9-49d9-a46b-d04791d2975e"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"595e58fa-d5c4-4bc4-9930-e478433dd0fe\" class=\"plotly-graph-div\" style=\"height:600px; width:1000px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"595e58fa-d5c4-4bc4-9930-e478433dd0fe\")) {                    Plotly.newPlot(                        \"595e58fa-d5c4-4bc4-9930-e478433dd0fe\",                        [{\"labels\":[\"ANIMAL\",\"BICYCLE ADVANCING LEGALLY ON RED LIGHT\",\"CELL PHONE USE OTHER THAN TEXTING\",\"DISREGARDING OTHER TRAFFIC SIGNS\",\"DISREGARDING ROAD MARKINGS\",\"DISREGARDING STOP SIGN\",\"DISREGARDING TRAFFIC SIGNALS\",\"DISREGARDING YIELD SIGN\",\"DISTRACTION - FROM INSIDE VEHICLE\",\"DISTRACTION - FROM OUTSIDE VEHICLE\",\"DISTRACTION - OTHER ELECTRONIC DEVICE (NAVIGATION DEVICE, DVD PLAYER, ETC.)\",\"DRIVING ON WRONG SIDE/WRONG WAY\",\"DRIVING SKILLS/KNOWLEDGE/EXPERIENCE\",\"EQUIPMENT - VEHICLE CONDITION\",\"EVASIVE ACTION DUE TO ANIMAL, OBJECT, NONMOTORIST\",\"EXCEEDING AUTHORIZED SPEED LIMIT\",\"EXCEEDING SAFE SPEED FOR CONDITIONS\",\"FAILING TO REDUCE SPEED TO AVOID CRASH\",\"FAILING TO YIELD RIGHT-OF-WAY\",\"FOLLOWING TOO CLOSELY\",\"HAD BEEN DRINKING (USE WHEN ARREST IS NOT MADE)\",\"IMPROPER BACKING\",\"IMPROPER LANE USAGE\",\"IMPROPER OVERTAKING/PASSING\",\"IMPROPER TURNING/NO SIGNAL\",\"MOTORCYCLE ADVANCING LEGALLY ON RED LIGHT\",\"OBSTRUCTED CROSSWALKS\",\"OPERATING VEHICLE IN ERRATIC, RECKLESS, CARELESS, NEGLIGENT OR AGGRESSIVE MANNER\",\"PASSING STOPPED SCHOOL BUS\",\"PHYSICAL CONDITION OF DRIVER\",\"RELATED TO BUS STOP\",\"ROAD CONSTRUCTION/MAINTENANCE\",\"ROAD ENGINEERING/SURFACE/MARKING DEFECTS\",\"TEXTING\",\"TURNING RIGHT ON RED\",\"UNDER THE INFLUENCE OF ALCOHOL/DRUGS (USE WHEN ARREST IS EFFECTED)\",\"VISION OBSCURED (SIGNS, TREE LIMBS, BUILDINGS, ETC.)\",\"WEATHER\"],\"values\":[556,72,901,1416,857,7254,12471,229,4641,2817,320,3288,21240,4154,1252,1878,1638,28078,71210,65929,695,27052,24096,31634,21616,18,61,8256,85,4001,274,1494,1730,272,456,3187,3790,10185],\"type\":\"pie\",\"hole\":0.4}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"family\":\"Arial\",\"size\":20,\"color\":\"#000000\"},\"text\":\"<b>Primary Causes of Crashes</b>\"},\"font\":{\"family\":\"Arial\",\"size\":8,\"color\":\"#000000\"},\"width\":1000,\"height\":600},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('595e58fa-d5c4-4bc4-9930-e478433dd0fe');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "labels = prim_cause_df[\"PRIM_CONTRIBUTORY_CAUSE\"].unique()\n",
        "values = prim_cause_df[\"Counts\"]\n",
        "\n",
        "fig = go.Figure(\n",
        "    data=[\n",
        "        go.Pie(\n",
        "            labels=labels,\n",
        "            values=values,            \n",
        "        )\n",
        "    ]\n",
        ")\n",
        "\n",
        "fig.update_traces(hole=0.4)\n",
        "\n",
        "fig.update_layout(\n",
        "    width=1000,\n",
        "    height=600,\n",
        "    title=dict(\n",
        "        text='<b>Primary Causes of Crashes</b>',\n",
        "        font=dict(\n",
        "            family=\"Arial\",\n",
        "            size=20,\n",
        "            color='#000000'\n",
        "        )\n",
        "    ),\n",
        "    font=dict(\n",
        "        family=\"Arial\",\n",
        "        size=8,\n",
        "        color='#000000'\n",
        "    )\n",
        ")\n",
        "fig.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QrnQ8AJ70AZA"
      },
      "source": [
        "# **Crashes via Time of Day & Day of Week**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9To6aQ-Ordc8"
      },
      "source": [
        "This visualization displays the number of crashes throughout the week at every hour via a heatmap. It has interactivity, so hovering over the heatmap shows the specific number of crashes during that time. Darker colors means less crashes whereas lighter colors means more crashes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q8jsOOvfz7oj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0897050f-a9d0-42b1-a998-5b0416ce846c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 678615 entries, 0 to 678614\n",
            "Data columns (total 2 columns):\n",
            " #   Column             Non-Null Count   Dtype\n",
            "---  ------             --------------   -----\n",
            " 0   CRASH_HOUR         678615 non-null  int64\n",
            " 1   CRASH_DAY_OF_WEEK  678615 non-null  int64\n",
            "dtypes: int64(2)\n",
            "memory usage: 15.5 MB\n"
          ]
        }
      ],
      "source": [
        "df_crash_time = df[['CRASH_HOUR', 'CRASH_DAY_OF_WEEK']]\n",
        "df_crash_time = df_crash_time.dropna()\n",
        "df_crash_time.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Gg-L9x7n91bD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "add4554a-5e7d-4575-f3a9-499499419767"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   CRASH_HOUR  CRASH_DAY_OF_WEEK DAYS_OF_WEEK\n",
              "0          14                  2      Tuesday\n",
              "1           8                  4     Thursday\n",
              "2           0                  6     Saturday\n",
              "3          11                  2      Tuesday\n",
              "4          18                  6     Saturday"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03621c19-46fe-4b55-bf5a-9fa9051c9aa6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CRASH_HOUR</th>\n",
              "      <th>CRASH_DAY_OF_WEEK</th>\n",
              "      <th>DAYS_OF_WEEK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14</td>\n",
              "      <td>2</td>\n",
              "      <td>Tuesday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>Thursday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>Saturday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>Tuesday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>18</td>\n",
              "      <td>6</td>\n",
              "      <td>Saturday</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03621c19-46fe-4b55-bf5a-9fa9051c9aa6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-03621c19-46fe-4b55-bf5a-9fa9051c9aa6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-03621c19-46fe-4b55-bf5a-9fa9051c9aa6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ],
      "source": [
        "df_crash_time['DAYS_OF_WEEK'] = 'EMPTY'\n",
        "df_crash_time.loc[(df_crash_time['CRASH_DAY_OF_WEEK'] == 1), 'DAYS_OF_WEEK'] = 'Monday'\n",
        "df_crash_time.loc[(df_crash_time['CRASH_DAY_OF_WEEK'] == 2), 'DAYS_OF_WEEK'] = 'Tuesday'\n",
        "df_crash_time.loc[(df_crash_time['CRASH_DAY_OF_WEEK'] == 3), 'DAYS_OF_WEEK'] = 'Wednesday'\n",
        "df_crash_time.loc[(df_crash_time['CRASH_DAY_OF_WEEK'] == 4), 'DAYS_OF_WEEK'] = 'Thursday'\n",
        "df_crash_time.loc[(df_crash_time['CRASH_DAY_OF_WEEK'] == 5), 'DAYS_OF_WEEK'] = 'Friday'\n",
        "df_crash_time.loc[(df_crash_time['CRASH_DAY_OF_WEEK'] == 6), 'DAYS_OF_WEEK'] = 'Saturday'\n",
        "df_crash_time.loc[(df_crash_time['CRASH_DAY_OF_WEEK'] == 7), 'DAYS_OF_WEEK'] = 'Sunday'\n",
        "df_crash_time.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OAIv6-ENZQBP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "b91f935d-9ccd-47dd-b734-fe15c490c2c3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    DAYS_OF_WEEK  CRASH_HOUR  Counts\n",
              "0         Friday           0    1425\n",
              "1         Friday           1    1028\n",
              "2         Friday           2     888\n",
              "3         Friday           3     670\n",
              "4         Friday           4     668\n",
              "..           ...         ...     ...\n",
              "163    Wednesday          19    4169\n",
              "164    Wednesday          20    3133\n",
              "165    Wednesday          21    2684\n",
              "166    Wednesday          22    2312\n",
              "167    Wednesday          23    1863\n",
              "\n",
              "[168 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ce292a2e-519d-47c7-b567-b958087fe0ed\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DAYS_OF_WEEK</th>\n",
              "      <th>CRASH_HOUR</th>\n",
              "      <th>Counts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Friday</td>\n",
              "      <td>0</td>\n",
              "      <td>1425</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Friday</td>\n",
              "      <td>1</td>\n",
              "      <td>1028</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Friday</td>\n",
              "      <td>2</td>\n",
              "      <td>888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Friday</td>\n",
              "      <td>3</td>\n",
              "      <td>670</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Friday</td>\n",
              "      <td>4</td>\n",
              "      <td>668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>163</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>19</td>\n",
              "      <td>4169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>164</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>20</td>\n",
              "      <td>3133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>165</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>21</td>\n",
              "      <td>2684</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>166</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>22</td>\n",
              "      <td>2312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>167</th>\n",
              "      <td>Wednesday</td>\n",
              "      <td>23</td>\n",
              "      <td>1863</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>168 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ce292a2e-519d-47c7-b567-b958087fe0ed')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ce292a2e-519d-47c7-b567-b958087fe0ed button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ce292a2e-519d-47c7-b567-b958087fe0ed');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ],
      "source": [
        "df_crash_time = df_crash_time.groupby(['DAYS_OF_WEEK', 'CRASH_HOUR']).size().reset_index(name = 'Counts')\n",
        "df_crash_time"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = go.Figure(data = go.Heatmap(\n",
        "    x = df_crash_time.DAYS_OF_WEEK,\n",
        "    y = df_crash_time.CRASH_HOUR,\n",
        "    z = df_crash_time.Counts\n",
        "))\n",
        "\n",
        "# Keep days of week in order from Monday to Sunday\n",
        "fig.update_xaxes(categoryorder = 'array', categoryarray = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\n",
        "\n",
        "fig.update_layout(\n",
        "    title = 'Crashes via Time of Day & Day of Week',\n",
        "    xaxis_title = 'Days of the Week',\n",
        "    yaxis_title = 'Hours',\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "iwyXccnov2ir",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "outputId": "76eee5bb-e858-4c05-f17c-2daa43fdb98d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"e527f68d-77e4-4182-ad83-95c6bdc1de5a\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e527f68d-77e4-4182-ad83-95c6bdc1de5a\")) {                    Plotly.newPlot(                        \"e527f68d-77e4-4182-ad83-95c6bdc1de5a\",                        [{\"x\":[\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Friday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Monday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Saturday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Sunday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Thursday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Tuesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\",\"Wednesday\"],\"y\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],\"z\":[1425,1028,888,670,668,1192,2308,4965,6131,4889,4421,4916,5523,5661,6339,7941,8022,7821,6372,4449,3514,3002,2596,2208,3781,3588,3267,3039,2247,1783,1541,1469,1863,2698,3492,4136,4881,5234,5566,5261,5022,4917,4559,3893,3372,3163,2777,2303,1729,1423,1075,856,889,1304,2193,4579,5645,4911,4873,5490,6351,6791,7503,8903,9002,8640,7282,5412,4333,3908,3921,3529,3084,2933,2731,2082,1705,1353,1553,1964,2657,3764,4718,5573,6560,6663,6940,6738,6390,6162,5520,4833,4316,4033,4224,4230,1387,1016,786,618,703,1169,2365,5226,6447,5050,4533,4863,5617,5779,6598,7765,7788,7828,6169,4197,3233,2833,2306,1832,1833,1519,1201,876,951,1353,2416,4969,6059,4858,4389,4742,5583,5656,6296,7626,7550,7112,5550,3840,2967,2507,2190,1650,1311,895,720,570,649,1178,2397,5234,6677,5052,4553,4983,5634,5783,6437,7822,8100,8183,6406,4169,3133,2684,2312,1863],\"type\":\"heatmap\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"categoryorder\":\"array\",\"categoryarray\":[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"],\"title\":{\"text\":\"Days of the Week\"}},\"title\":{\"text\":\"Crashes via Time of Day & Day of Week\"},\"yaxis\":{\"title\":{\"text\":\"Hours\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('e527f68d-77e4-4182-ad83-95c6bdc1de5a');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t3sl2itzY1Xf"
      },
      "source": [
        "# **Crashes Plotted on the Map of Chicago**"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this visualization, we have plotted the places where accidents took place in Chicago. The visualization is not interactive, however, it will be making it interactive in the final version. **If the map dosen't appear correctly, try uncommenting the first command \"!pip uninstall shapely\" and press y when it prompts a y/n question. Keep the \"!pip install shapely --no-binary shapely\".**"
      ],
      "metadata": {
        "id": "zaJzfNuC4t4h"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V0k2aIJdCz_n",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "d3c9935e-0595-42f6-f083-1b48a9950f47"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: shapely in /usr/local/lib/python3.8/dist-packages (1.8.5.post1)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-101-10abf686a2ef>:4: SettingWithCopyWarning:\n",
            "\n",
            "\n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "<ipython-input-101-10abf686a2ef>:5: SettingWithCopyWarning:\n",
            "\n",
            "\n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "/usr/local/lib/python3.8/dist-packages/cartopy/crs.py:228: ShapelyDeprecationWarning:\n",
            "\n",
            "__len__ for multi-part geometries is deprecated and will be removed in Shapely 2.0. Check the length of the `geoms` property instead to get the  number of parts of a multi-part geometry.\n",
            "\n",
            "/usr/local/lib/python3.8/dist-packages/cartopy/crs.py:280: ShapelyDeprecationWarning:\n",
            "\n",
            "Iteration over multi-part geometries is deprecated and will be removed in Shapely 2.0. Use the `geoms` property to access the constituent parts of a multi-part geometry.\n",
            "\n",
            "/usr/local/lib/python3.8/dist-packages/cartopy/crs.py:347: ShapelyDeprecationWarning:\n",
            "\n",
            "__len__ for multi-part geometries is deprecated and will be removed in Shapely 2.0. Check the length of the `geoms` property instead to get the  number of parts of a multi-part geometry.\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x1080 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#!pip uninstall shapely\n",
        "!pip install shapely --no-binary shapely\n",
        "df_clean_map=df.dropna(subset=['LATITUDE', 'LONGITUDE', 'CRASH_HOUR'])\n",
        "df_clean_map['LATITUDE'] = df_clean_map['LATITUDE'].apply(pd.to_numeric)\n",
        "df_clean_map['LONGITUDE'] = df_clean_map[\"LONGITUDE\"].apply(pd.to_numeric)\n",
        "\n",
        "extent = [-87, -88, 41.6, 42.1]\n",
        "central_lon = np.mean(extent[:2])\n",
        "central_lat = np.mean(extent[2:])\n",
        "\n",
        "plt.figure(figsize=(15, 15))\n",
        "ax = plt.axes(projection=crs.AlbersEqualArea(central_lon, central_lat))\n",
        "ax.set_extent(extent)\n",
        "\n",
        "plt.scatter(x=df_clean_map.LONGITUDE, y=df_clean_map.LATITUDE, \n",
        "            color=\"brown\", s=5, transform=crs.PlateCarree())\n",
        "\n",
        "ax.add_feature(cartopy.feature.OCEAN)\n",
        "ax.add_feature(cartopy.feature.LAND, edgecolor='black')\n",
        "ax.add_feature(cartopy.feature.LAKES, edgecolor='black')\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Speed Limit vs Number of Crashes**"
      ],
      "metadata": {
        "id": "XKkyXo4eC6FZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "This visualization looks at the frequency of crashes at various speed limits. It is not interactive but this will be added in the final version.\n"
      ],
      "metadata": {
        "id": "9C8lzqF5P1Hb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_clean2 = df.drop(columns = ['RD_NO', 'CRASH_DATE_EST_I', 'LANE_CNT', 'HIT_AND_RUN_I', 'INTERSECTION_RELATED_I', 'NOT_RIGHT_OF_WAY_I', 'PHOTOS_TAKEN_I', 'STATEMENTS_TAKEN_I', 'DOORING_I', 'WORK_ZONE_I', 'WORK_ZONE_TYPE', 'WORKERS_PRESENT_I'])\n",
        "df_clean2 = df_clean2.dropna()\n",
        "df_clean2.info()"
      ],
      "metadata": {
        "id": "4iABTS93S-Ki",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db3b8bea-f81b-4dc6-fcfd-737e2861d9b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 654598 entries, 0 to 678614\n",
            "Data columns (total 37 columns):\n",
            " #   Column                         Non-Null Count   Dtype  \n",
            "---  ------                         --------------   -----  \n",
            " 0   CRASH_RECORD_ID                654598 non-null  object \n",
            " 1   CRASH_DATE                     654598 non-null  object \n",
            " 2   POSTED_SPEED_LIMIT             654598 non-null  int64  \n",
            " 3   TRAFFIC_CONTROL_DEVICE         654598 non-null  object \n",
            " 4   DEVICE_CONDITION               654598 non-null  object \n",
            " 5   WEATHER_CONDITION              654598 non-null  object \n",
            " 6   LIGHTING_CONDITION             654598 non-null  object \n",
            " 7   FIRST_CRASH_TYPE               654598 non-null  object \n",
            " 8   TRAFFICWAY_TYPE                654598 non-null  object \n",
            " 9   ALIGNMENT                      654598 non-null  object \n",
            " 10  ROADWAY_SURFACE_COND           654598 non-null  object \n",
            " 11  ROAD_DEFECT                    654598 non-null  object \n",
            " 12  REPORT_TYPE                    654598 non-null  object \n",
            " 13  CRASH_TYPE                     654598 non-null  object \n",
            " 14  DAMAGE                         654598 non-null  object \n",
            " 15  DATE_POLICE_NOTIFIED           654598 non-null  object \n",
            " 16  PRIM_CONTRIBUTORY_CAUSE        654598 non-null  object \n",
            " 17  SEC_CONTRIBUTORY_CAUSE         654598 non-null  object \n",
            " 18  STREET_NO                      654598 non-null  int64  \n",
            " 19  STREET_DIRECTION               654598 non-null  object \n",
            " 20  STREET_NAME                    654598 non-null  object \n",
            " 21  BEAT_OF_OCCURRENCE             654598 non-null  float64\n",
            " 22  NUM_UNITS                      654598 non-null  int64  \n",
            " 23  MOST_SEVERE_INJURY             654598 non-null  object \n",
            " 24  INJURIES_TOTAL                 654598 non-null  float64\n",
            " 25  INJURIES_FATAL                 654598 non-null  float64\n",
            " 26  INJURIES_INCAPACITATING        654598 non-null  float64\n",
            " 27  INJURIES_NON_INCAPACITATING    654598 non-null  float64\n",
            " 28  INJURIES_REPORTED_NOT_EVIDENT  654598 non-null  float64\n",
            " 29  INJURIES_NO_INDICATION         654598 non-null  float64\n",
            " 30  INJURIES_UNKNOWN               654598 non-null  float64\n",
            " 31  CRASH_HOUR                     654598 non-null  int64  \n",
            " 32  CRASH_DAY_OF_WEEK              654598 non-null  int64  \n",
            " 33  CRASH_MONTH                    654598 non-null  int64  \n",
            " 34  LATITUDE                       654598 non-null  float64\n",
            " 35  LONGITUDE                      654598 non-null  float64\n",
            " 36  LOCATION                       654598 non-null  object \n",
            "dtypes: float64(10), int64(6), object(21)\n",
            "memory usage: 189.8+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_speedlimits = pd.unique(df_clean2['POSTED_SPEED_LIMIT'])\n",
        "df_speedlimits"
      ],
      "metadata": {
        "id": "EVUilItO_ALI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3de647ea-9db8-4c67-f6cf-a8f52781122f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([30, 25, 40, 24, 35, 10, 15, 20,  5, 45,  0, 50, 55,  1, 11,  3, 99,\n",
              "       14, 65, 62,  9, 39, 33, 60,  2, 36,  4,  6, 34, 22, 32, 12, 23,  7,\n",
              "       26, 49, 70, 63, 31, 29, 38, 18, 44])"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "speedlimits = df_speedlimits.tolist()\n",
        "speedlimits.sort()\n",
        "speedlimits"
      ],
      "metadata": {
        "id": "AavZy-RY_Ck-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c8159c7e-b7bb-4738-b0b7-cf8fd98db138"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0,\n",
              " 1,\n",
              " 2,\n",
              " 3,\n",
              " 4,\n",
              " 5,\n",
              " 6,\n",
              " 7,\n",
              " 9,\n",
              " 10,\n",
              " 11,\n",
              " 12,\n",
              " 14,\n",
              " 15,\n",
              " 18,\n",
              " 20,\n",
              " 22,\n",
              " 23,\n",
              " 24,\n",
              " 25,\n",
              " 26,\n",
              " 29,\n",
              " 30,\n",
              " 31,\n",
              " 32,\n",
              " 33,\n",
              " 34,\n",
              " 35,\n",
              " 36,\n",
              " 38,\n",
              " 39,\n",
              " 40,\n",
              " 44,\n",
              " 45,\n",
              " 49,\n",
              " 50,\n",
              " 55,\n",
              " 60,\n",
              " 62,\n",
              " 63,\n",
              " 65,\n",
              " 70,\n",
              " 99]"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "allspeeds = df_clean2['POSTED_SPEED_LIMIT'].tolist()\n",
        "allspeeds\n",
        "counts = []\n",
        "\n",
        "for x in speedlimits:\n",
        "    counts.append(allspeeds.count(x))\n",
        "counts\n",
        "speeddict = {}\n",
        "for x in speedlimits:\n",
        "    for y in counts:\n",
        "        speeddict[x] = y\n",
        "        counts.remove(y)\n",
        "        break\n",
        "        \n",
        "#print(speeddict)\n",
        "speeddf = pd.DataFrame(speeddict.items())\n",
        "import seaborn as sns\n",
        "ax = sns.barplot(x=0, y=1, data=speeddf)\n",
        "ax.set(xlabel = 'Speed Limits', ylabel='Number of Crashes', title='Speed Limit Vs Number of Crashes')\n",
        "import matplotlib.pyplot as plt\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "F7XXXMiP_EDu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "outputId": "99666136-80df-4140-ca9d-44831707d9a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAaIAAAEgCAYAAAD2c3e8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deXxM9/4/8NdktYUIsqItVwgpIiHUEgmSIIvYEipUEWovKcolGluCclGqrtLqtfTaCSm9FLUvjbYpSoKkzSqSyJ5JMp/fH345XyOZySQymVZez8fD42E+7znnvGc+k/M+y+ecIxNCCBAREemInq4TICKi2o2FiIiIdIqFiIiIdIqFiIiIdIqFiIiIdIqFiIiIdIqFiP52AgMDsX///kpPN3jwYFy7dq1Ky5w4cSIOHz5cpWn/btq2bYu4uDidLPvhw4fw9fWFg4MDdu3apZMcSm3atAnBwcE6zaG2YCEijd28eRMBAQFwdHREt27dEBAQgF9++UXXaSlRt/I4ceIEnJ2dqzTf7du3w8/PDwBw6NAhjBo1SuV7lyxZgnnz5pVpv3fvHuzt7ZGZmanxcq9du4a2bdti6dKlSu2jRo3CoUOHNJ7P38X27dvh7OyMqKgojB07ttz3/Pjjj3j33Xfh4OCA7t27Y8yYMThz5kwNZ0rViYWINJKTk4MpU6ZgzJgxuH79Oi5cuIDp06fDyMhI16n95fj5+eH7779HXl6eUvvRo0fh6uoKU1PTSs2vXr16OHr0KP7888/qTFPriouLKz1NYmIi2rRpozL+3XffYdasWRgyZAguXLiAy5cvY+bMmfjhhx+qLQeqeSxEpJFHjx4BALy8vKCvr486deqgV69eaNeuHYDnewkBAQEIDQ2Fo6MjPD09ceXKFWn67OxsLFy4EL169ULv3r2xfv16lJSUSPEDBw5g4MCB6Nq1KyZMmICEhAQpdunSJXh6esLR0RGhoaGo6s1A3NzccPnyZQDP95xmzpyJ4OBgODg4wNvbG48ePcIXX3yBHj16wMXFBRcvXpSmLT0cGBsbi5CQENy+fRsODg5wcnIqsxwHBweYm5vj9OnTUltJSQmOHz8OX19fAMAvv/yCoUOHokuXLnjnnXewatUqlXmbmJhg6NCh2Lx5c7nxl/cC//zzT7Rt21ZaCQcGBmL9+vUICAiAg4MDpkyZgoyMDMydOxddunTBsGHDyhS58+fPo1+/fnB2dkZ4eDgUCoUUU9dXbdu2xe7du+Hu7g53d/dy8z1z5gwGDx4MJycnBAYGIjY2FgAwduxYXLt2DaGhoXBwcJB+c6WEEAgLC8PUqVMxYsQImJiYQE9PD926dcPy5csB/N/vcOXKlXB2dsamTZsQHx+PsWPHwtnZGc7Ozpg7dy6ysrKk+W7btg29e/eGg4MDPDw8lH63RUVFmDdvHhwcHDB48GD8+uuvUiwlJQUzZsxA9+7d4ebmpnQosTL9SwAEkQays7NFt27dxLx588S5c+dEZmamUvzgwYPCzs5O7Ny5U8jlcnHixAnRpUsXkZGRIYQQYurUqWLx4sUiNzdXpKWliWHDhom9e/cKIYT4/vvvRf/+/UVMTIwoKioSmzdvFv7+/kIIIZ4+fSo6d+4sIiMjhVwuFzt37hR2dnbiv//9b7l5bty4UcydO7fcmKurq7h06ZL0Pnt7e3HhwgVRVFQkPvroI+Hq6iq2bNki5HK5+Pbbb4Wrq6s07ZgxY6RlHjx4UAQEBKj9vrZs2SLGjRsnvb5w4YJwdnYWcrlcCCHEyJEjxeHDh4UQQuTk5IioqKhy53P16lXRu3dvkZqaKhwcHERsbKwQQoiAgABx8ODBcj/zH3/8IWxtbUVRUZGUe//+/UVcXJzIysoSAwcOFO7u7uLSpUvSZ1+wYIE0va2trRgzZozIyMgQCQkJwt3dXfrs6vqqdNr33ntPZGRkiPz8/DKf5+HDh6JTp07i4sWLQi6Xi23bton+/fuLwsLCMt/zy2JiYoStra2Ij49X+b2X/g537dolioqKRH5+vnj8+LG4ePGiKCwsFE+fPhWjR48Wy5cvF0IIERsbK/r06SOSk5Ol7y4uLk76Xu3t7cW5c+dEcXGxWLt2rRgxYoQQQoiSkhLh5+cnNm3aJAoLC0V8fLxwc3MTFy5cEEJo3r/0HPeISCMNGjTAnj17IJPJsHjxYvTo0QNTpkxBWlqa9B4zMzOMGzcOhoaGGDRoEN566y2cO3cOaWlpOH/+PBYuXIh69eqhSZMmeO+993DixAkAwL59+xAUFITWrVvDwMAAU6ZMwd27d5GQkIALFy6gTZs28PT0hKGhIcaNG4emTZtWy2dycnJC7969YWBgAE9PT2RkZCAoKEjKPyEhQWnLuTJ8fX1x48YNJCcnAwCOHDkCLy8vGBoaAgAMDAwQHx+P9PR01K9fH507d1Y7v2bNmiEgIAAbN26sUj5Dhw5Fy5YtYWJigj59+qBFixZ45513pM9+584dpfdPmjQJpqamsLa2xtixYxEREQFAfV+VCgoKgqmpKerUqVMmj5MnT8LFxQU9e/aEoaEhJkyYgIKCAkRFRVX4GUrPrZmbm6t9n7m5OQIDA2FgYIA6dergjTfeQM+ePWFkZAQzMzOMHz8eN27cAADo6+tDLpcjNjYWRUVFaN68OVq2bCnNy9HRES4uLtDX14evry/u3bsHAPj111+Rnp4uHZ5u0aIFRo4ciZMnTwKofP/Wdga6ToD+Plq3bo2wsDAAQGxsLD766COsXLkS69atAwBYWFhAJpNJ77e2tkZqaioSExNRXFyMXr16STGFQgErKysAz88LrFy5EuHh4VJcCIGUlBSkpqbC0tJSapfJZNJ0r6pJkybS/+vUqYPGjRtDX19feg0AeXl5aNiwYaXnbW1tDScnJxw7dgzvvvsuzpw5g//85z9SfMWKFdi4cSMGDhyI5s2bY/r06XB1dVU7z0mTJmHAgAHSyrAyXizexsbGSq/r1KlT5nzWi9+xjY0NUlNTAajvKxsbmzLTviw1NRXW1tbSaz09PVhZWSElJaXCz1B6bi01NRUtWrRQ+b4Xfy8AkJaWhhUrVuDmzZvIzc2FEELq0zfeeAMLFy7Epk2bEBMTg169emHBggWwsLAAgDLfU2FhIYqLi5GQkIDU1FSlQ7MlJSXS66r0b23GQkRV0rp1awwdOhTffvut1JaSkgIhhFSMkpKS4ObmBktLSxgZGeHq1aswMCj7k7OyssKUKVPg4+NTJhYXFyftVQDPV3pJSUla+ESae7HYquPn54d///vfaNasGZo3bw57e3sp9uabb2LdunVQKBQ4ffo0Zs6ciWvXrqFevXoq59e4cWOMGzcO//rXv5Ta69ati4KCAun1i3upVZWUlCQNGkhMTJT2QtT1VSl134+5uTnu378vvS7tz9IVvzqtWrWClZUVTp8+jQkTJmi8/HXr1kEmk+H48eMwNTXF//73P4SGhkpxb29veHt7IycnB0uWLMHatWuxZs0atblYWVmhefPmSucBX1SV/q3NeGiONBIbG4sdO3ZIRSEpKQkRERHo1KmT9J709HTs2rULRUVFiIyMRGxsLFxcXGBubo6ePXsiLCwMOTk5UCgUiI+Px/Xr1wEAAQEB2LZtGx48eADg+cCGyMhIAICLiwsePHiA06dPo7i4GLt27apwRSuEQGFhofRPLpdX63fRpEkTpKSkVDhfd3d3JCYmYtOmTRgyZIhS7OjRo0hPT4eenp60da6nV/Gf4/jx4xEVFYWHDx9KbXZ2drhx4wYSExORnZ2NL774ogqfStmXX36JZ8+eISkpCbt27cKgQYMAqO8rTQwcOBDnz5/HlStXUFRUhB07dsDIyAgODg4VTiuTybBgwQJs2bIFBw8elH5LN2/exOLFi1VOl5ubi3r16sHExAQpKSnYvn27FHv48CGuXLkCuVwOIyMjGBsba9QPHTt2RP369bFt2zYUFBSgpKQE9+/fly5nqGr/1lbcIyKNNGjQAD///DN27tyJ7OxsmJiYwNXVVel6mY4dOyIuLg7du3dH06ZNsXHjRjRu3BgAsHr1aqxduxaDBg1Cbm4uWrRogUmTJgEABgwYgNzcXMyZMwcJCQkwMTHBO++8g4EDB8LMzAwbNmzAihUr8PHHH8PX1xddunRRm2tERIR0TgN4fsjwwoUL1fZddO/eHf/4xz/Qq1cvyGQylRfJ1qtXDx4eHjh27Bi8vb2VYj/++CPCwsJQUFAAa2trrF+/vtxzKi9r0KABJk6ciLVr10ptPXv2xKBBg+Dj44PGjRtj0qRJOHv27Ct9xn79+mHo0KHIycmBn58fhg8fDkB9X2miVatWWLNmDZYtW4aUlBTY2dlh69atGl8G4OnpiXr16mHr1q1Yvnw5jI2N0aZNG7V7SNOnT8f8+fPh5OSEli1bwtfXF1999RUAQC6X49NPP0VsbCwMDQ3h4OCgtLekir6+PrZu3Yrw8HD069cPcrkcb731FmbPng2g6v1bW8mE4IPx6NUdOnQI+/fvx969e3WdChH9zXBfkYiIdIqFiIiIdIqH5oiISKe4R0RERDpVY6Pm3NzcpOGRABAcHIzevXvj9u3bWLJkCQoLC2FjY4M1a9ZIFxrWdKwiCoUCubm5MDQ01PhaEiKi2k4IgaKiItSvX7/cYew1dmjOzc0NW7duha2trdSmUCjg4eGBVatWwcnJCVu2bMEff/yBVatW1XhME9nZ2UoX4xERkeZsbW1hYmJSpl2n1xFFR0fD2NhYui1GQEAA+vXrh1WrVtV4TBOl9wmztbXl4w+IiDQkl8tx//59aR36shotRMHBwRBCwNHREXPmzEFSUpLSfafMzMygUCiQmZlZ4zFNnhFTejjuxUOMRESkGVWnNGqsEO3evRtWVlaQy+VYsWIFQkNDMWDAgJpafLWKjo7WdQpERK+NGitEpXfkNTIywujRo/HBBx9g7NixSExMlN5Tem8mU1NTWFlZ1WisMuzt7blHRESkocLCQrUb8DUyfDsvLw/Z2dkAno+eOHnyJOzs7GBvb4+CggLcvHkTwPNnnXh6egJAjceIiEg3amTU3B9//IEZM2agpKQECoUCrVu3xj//+U+Ym5vjp59+QkhIiNJw6tJngNR0rCKlVZ17REREmqto3ck7K1QCCxERUeVVtO7knRWIiEinWIiIiEinWIiIXmPykpJKtRPpAp/QSvQaM9LXh9eBfWXaI4YH6CAbovJxj4iIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSKhYiIiHSqxgvRZ599hrZt2+L+/fsAgNu3b8PHxwceHh54//338fTpU+m9NR0jIqKaV6OF6LfffsPt27dhY2MDAFAoFPjoo4+wZMkSnDp1Ck5OTli7dq1OYkREpBs1VojkcjlCQ0OxdOlSqS06OhrGxsZwcnICAAQEBOC7777TSYyIiHSjxgrRhg0b4OPjg+bNm0ttSUlJsLa2ll6bmZlBoVAgMzOzxmNERKQbBjWxkKioKERHRyM4OLgmFqd10dHRuk6BSCOOjo4qY7du3arBTIhUq5FCdOPGDcTGxqJfv34AgOTkZEyYMAGBgYFITEyU3peeng49PT2YmprCysqqRmOVYW9vD2Nj40p/D0R/JeqKFFF1KiwsVLsBXyOH5oKCgnDx4kWcPXsWZ8+ehaWlJb788ktMnDgRBQUFuHnzJgBg37598PT0BPB8ZV+TMSIi0o0a2SNSRU9PD6tXr0ZISAgKCwthY2ODNWvW6CRGRES6IRNCCF0n8XdRunvJQ3P0d+J1YF+ZtojhATrIhGqritadvLMCERHplEaFKD09Hbm5uQCAkpISHDx4EIcPH4ZCodBqckRE9PrTqBBNnjwZcXFxAID169djx44d+OqrrxAWFqbV5IiI6PWnUSF6/Pgx7OzsAADHjh3Dv//9b3z99dc4efKkVpMjIqLXn0aj5vT09FBUVIRHjx7BxMQE1tbWUCgU0uE6IiKiqtKoEPXp0wezZs1CZmYmBg0aBACIiYmBhYWFVpMjIqLXn0aFaMWKFTh8+DAMDAzg6+sLAMjIyMCMGTO0mhwREb3+NCpERkZG8Pf3h0KhQFpaGszNzeHs7Kzt3IiIqBbQaLBCVlYW5s6di44dO8Ld3R0AcObMGaxfv16ryRER0etPo0IUEhKCBg0a4OzZszA0NAQAODg4IDIyUqvJERHR60+jQ3NXrlzBjz/+CENDQ8hkMgDPn+XDx2wTEdGr0miPyMTEBBkZGUptiYmJaNasmVaSIiKi2kOjQjRixAjMnDkTV69ehUKhQFRUFObPn4+AAN44kYiIXo1Gh+YmTZoEY2NjhIaGori4GAsXLoS/vz/GjRun7fyIiOg1p1EhkslkGDduHAsPERFVO40fjPfw4UPcu3cPeXl5Su3Dhw+v9qSIiKj20KgQbd26FZs3b0a7du1Qp04dqV0mk7EQERHRK9GoEH399dfYv38/2rVrp+18iIioltFo1FydOnXQqlUrbedCRES1kMpCpFAopH+zZs3C8uXLkZqaqtTOJ7QSEdGrUnlorn379tJdFIQQAID9+/dLcSEEZDIZ7t69q+UUiYjodaayEJ05c6Ym8yAiolpKZSGysbFROVFBQQH09PRgZGSklaSIiKj20GiwQnh4OH755RcAwLlz59CtWzd07doVZ8+e1WpyRET0+tOoEB0/fhxt2rQBAGzevBlr1qzB559/zucRERHRK9PoOqL8/HzUrVsXGRkZ+OOPP+Dh4QEASEhI0GpyRET0+tOoEL355ps4duwY4uPj0bNnTwBAenq60l0WiIiIqkKjQhQSEoKVK1fC0NAQK1asAABcvHhRKkpERERVpVEh6tixI/bt26fU5uPjAx8fH60kRUREtYfGd9+Wy+V49OgRMjIypAtcAaBHjx5aSYyIiGoHjQrRzZs3MXv2bMjlcuTk5KBBgwbIzc2FpaUlL3wlIqJXotHw7VWrVmHixIm4fv066tevj+vXr+ODDz7A6NGjtZ0fERG95jQqRI8fP8bYsWOV2oKCgvDVV19pIyciIqpFNCpEJiYmyMnJAQA0a9YMMTExyMrKKvO0ViIiosrSqBANGDAA58+fBwAMGzYMY8eOxdChQ6ULWzUxdepU+Pj4YMiQIRg9erR01+5Hjx7B398fHh4e8Pf3x+PHj6VpajpGREQ6IKrgxo0b4ty5c6KkpETjabKysqT/f//992LIkCFCCCECAwPFkSNHhBBCHDlyRAQGBkrvq+lYRQoKCsTNmzdFQUGBxtMQ6drg/XvL/COqSRWtOyvcIyopKUH//v0hl8ulNicnJ7i4uEBPT6MdKgDPD++VysnJgUwmw9OnT3Hnzh14eXkBALy8vHDnzh2kp6fXeIyIiHSjwuHb+vr60NfXR2Fh4Ss/9mHRokW4dOkShBDYvn07kpKSYGFhAX19fWlZ5ubmSEpKghCiRmNmZmav9NmIiKhqNLqOaOzYsZg9ezYmT54MS0tL6cmtANCiRQuNF1Z6e6AjR45g9erVmDVrViXT/WuIjo7WdQpEGnF0dFQZu3XrVg1mQqSaRoVo2bJlAIBLly4ptVf1UeFDhgzBkiVLYGlpiZSUFJSUlEBfXx8lJSVITU2FlZUVhBA1GqsMe3t7GBsbV/pzE/2VqCtSRNWpsLBQ7Qa8Rid57t27V+4/TYtQbm4ukpKSpNdnz55Fo0aN0KRJE9jZ2SEiIgIAEBERATs7O5iZmdV4jIiIdEMmxAs3jntJQUEB4uPjYWtrWyZ2//59vPHGGxrtGaSlpWHq1KnIz8+Hnp4eGjVqhPnz56NDhw6IjY3FggULkJWVhYYNGyI8PBytWrUCgBqPVaS0qnOPiP5OvA7sK9MWMTxAB5lQbVXRulNtIfrss8+QlZWFhQsXlomFhYXBxMQE06ZNq96M/8JYiOjviIWIdK2idafaQ3MnT57EhAkTyo2NHz8eJ06cqJ4siYio1lJbiFJSUmBhYVFuzMLCAikpKVpJioiIag+1hahu3bpKgwxelJiYiLp162olKSIiqj3UFiIXFxesW7eu3NiGDRvg4uKilaSIiKj2UHsd0ezZs+Hv7w8fHx+4u7ujWbNmePLkCb7//nvk5OSUeXw4ERFRZaktRM2aNcPhw4exY8cO/Pjjj8jMzISpqSlcXV0xfvx4NGrUqKbyJCKi11SFd1Zo1KgRPvzww5rIhYiIaiHNb59NRESkBSxERESkUyxERESkUyoL0ciRI6X/f/bZZzWSDBER1T4qC9Hjx49RWFgIANixY0eNJURERLWLylFz/fr1g4eHB2xsbFBYWIh333233Pft3r1ba8kREdHrT2UhWrVqFW7evImEhAT8+uuvGD58eE3mRUREtYTa64icnJzg5OSEoqIi+Pn51VRORERUi2j0qPDhw4fj2rVrOHLkCFJTU2Fubg5fX190795d2/kREdFrTqPh2/v378fs2bPRrFkzDBgwAObm5pg7dy7++9//ajs/IiJ6zWm0R7R9+3bs3LkT7dq1k9oGDhyImTNnKg3zJiIiqiyN9ogyMzPRunVrpbZWrVrh2bNnWkmKiIhqD40KUZcuXRAWFob8/HwAQF5eHlavXg0HBwetJkdERK8/jQ7NffLJJ/jwww/h5OSERo0a4dmzZ3BwcMCnn36q7fyIiOg1p1EhMjc3x+7du5GcnCyNmrO0tNR2bkREVAtoVIhKWVpasgAREVG14t23iYhIp1iIiIhIpyosRAqFAleuXIFcLq+JfIiIqJapsBDp6elh6tSpMDIyqol8iIioltHo0FzXrl1x+/ZtbedCRES1kEaj5qytrTFp0iT069cPlpaWkMlkUmzWrFlaS46IiF5/GhWiwsJC9O/fHwCQkpKi1YSIiKh20agQrVq1Stt5EBFRLaXxBa2xsbH47rvv8PTpUyxZsgQPHz6EXC5XuiM3ERFRZWk0WCEyMhLvvvsuUlJScOTIEQBAbm4uwsLCtJocERG9/jTaI9q4cSO++uortGvXDpGRkQCAdu3a4d69e1pNjoiIXn8a7RGlp6ejbdu2ACCNmJPJZEqj59TJyMjApEmT4OHhAW9vb0yfPh3p6ekAgNu3b8PHxwceHh54//338fTpU2m6mo4REVHN06gQdejQAUePHlVqO3HiBDp27KjRQmQyGSZOnIhTp07h+PHjaNGiBdauXQuFQoGPPvoIS5YswalTp+Dk5IS1a9cCQI3HiIhINzQqRIsWLcK//vUvjBkzBnl5eZgwYQI2bNiAjz/+WKOFmJqawtnZWXrduXNnJCYmIjo6GsbGxnBycgIABAQE4LvvvgOAGo8REZFuaHSOqHXr1oiMjMQPP/yAvn37wsrKCn379kX9+vUrvUCFQoG9e/fCzc0NSUlJsLa2lmJmZmZQKBTIzMys8ZipqanGnyE6OrrSn5tIFxwdHVXGbt26VYOZEKmm8fDtunXrwtHREc2bN4eFhUWVihAALFu2DPXq1cOYMWPw/fffV2keumZvbw9jY2Ndp0H0StQVKaLqVFhYqHYDXqNClJiYiODgYPz8889o2LAhsrKy0KlTJ6xZswY2NjYaJxMeHo64uDhs3boVenp6sLKyQmJiohRPT0+Hnp4eTE1NazxGRES6odE5ovnz56NDhw64ceMGrly5guvXr8Pe3h4LFizQeEHr1q1DdHQ0Nm/eLN3J297eHgUFBbh58yYAYN++ffD09NRJjIiIdEMmhBAVvalLly64du0aDA0NpTa5XA5nZ2dERUVVuJAHDx7Ay8sLb775JurUqQMAaN68OTZv3oyffvoJISEhKCwshI2NDdasWYOmTZsCQI3HKlK6e8lDc/R34nVgX5m2iOEBOsiEaquK1p0aFaL3338f06ZNUzqm/NNPP+Gzzz7Djh07qjfjvzAWIvo7YiEiXato3anyHNGGDRuk/7do0QJBQUHo27cvLC0tkZycjPPnz8PLy0s7WRMRUa2hshAlJycrvXZ3dwfw/AS/kZERBgwYgMLCQu1mR0RErz2VhYiPfiAiopqg8XVE+fn5iIuLQ15enlJ7ly5dqj0pIiKqPTQqREeOHEFoaCgMDQ2lUW/A83vInTt3Tlu5ERFRLaBRIVqzZg02bdqEnj17ajsfIiKqZTS6oNXQ0BDdunXTdi5ERFQLaVSIZs2ahbCwMOkZQkRERNVFo0Nzb775JjZu3Ig9e/ZIbUIIyGQy3L17V2vJERHR60+jQjRv3jz4+vpi0KBBSoMViIiIXpVGhSgzMxOzZs3S+NHgREREmtLoHNHQoUPLPCqciIioOmi0R/TLL79g9+7d+Pzzz8vcqXr37t1aSYyIiGoHjQrRyJEjMXLkSG3nQkREtZBGhcjPz0/beRARUS2lUSE6cOCAytjw4cOrLRkiIqp9NCpELw9USEtLwx9//AEHBwcWIiIieiUaFaJvvvmmTNuBAwcQGxtb7QkREVHtotHw7fIMHToUBw8erM5ciIioFtJoj0ihUCi9zs/Px7Fjx2BiYqKVpIiIqPbQqBC1b9++zF0VLCwssGzZMq0kRUREtYdGhejMmTNKr+vWrQszMzOtJERERLWLRoXIxsZG23kQEVEtpbYQBQYGqr3RqUwmw9dff13tSRERUe2hthD5+PiU256SkoJvvvkGBQUFWkmKiIhqD7WFaMSIEUqvMzIysG3bNvz3v//FoEGDMG3aNK0mR0RErz+NzhHl5ORg+/bt2L17N/r27YvDhw+jZcuW2s6NiIhqAbWFqKCgAF9//TV27NgBZ2dn7NmzB23atKmp3IiIqBZQW4jc3NygUCgwceJE2NvbIy0tDWlpaUrv6dGjh1YTJCKi15vaQlSnTh0AwN69e8uNy2SyMtcYERERVYbaQnT27NmayoOIiGqpKt/0lIiIqDqwEBERkU6xEBERkU7VSCEKDw+Hm5sb2rZti/v3724id+oAAB1tSURBVEvtjx49gr+/Pzw8PODv74/Hjx/rLEZERLpRI4WoX79+2L17d5mbp4aEhGD06NE4deoURo8ejSVLlugsRkREulEjhcjJyQlWVlZKbU+fPsWdO3fg5eUFAPDy8sKdO3eQnp5e4zEiItIdjW7xow1JSUmwsLCAvr4+AEBfXx/m5uZISkqCEKJGY5V9tlJ0dHR1fQ1EWuXo6KgyduvWrRrMhEg1nRWivzN7e3sYGxvrOg2iV6KuSBFVp8LCQrUb8DorRFZWVkhJSUFJSQn09fVRUlKC1NRUWFlZQQhRozEiItIdnQ3fbtKkCezs7BAREQEAiIiIgJ2dHczMzGo8RkREuiMTQghtL2T58uU4ffo00tLS0LhxY5iamuLEiROIjY3FggULkJWVhYYNGyI8PBytWrUCgBqPaaJ095KH5ujvxOvAvjJtEcMDdJAJ1VYVrTtrpBC9LliI6O+IhYh0raJ1J++sQEREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREREOsVCREQ6IS9RVKqdXl8Guk6AiGonI309DD94u0z7gWGddZAN6RL3iIh0SF5SXKUY0euEe0REOmSkb4DBhzaXGzsxdFoNZ0OkG9wjIiIinWIhIiIinWIhIiIinWIhIiIinWIholpPXiKvVDsRVS+OmqPXQlGJHIb6Rhq3v8hI3wgDjw0p0x7pc6Ta8iMi1ViI6LVgqG+EkP96lmn/ZOR3OsiGiCqDh+aIiEinWIiIiEinWIio2pQUl39yX1U7ERHAc0RUjfQNjPDtzrLnafzH8zwNEanGPSIiItKpWlmIHj16BH9/f3h4eMDf3x+PHz+ulvmK4pJqmQ8RUW1SKw/NhYSEYPTo0fD19cXRo0exZMkS7Nq1S+Pp0/9zBAbyojLtzT4YU51pEpGWlJQI6OvLNG4n7ap1hejp06e4c+cOdu7cCQDw8vLCsmXLkJ6eDjMzM7XTCiEAAMVG5X9thYWF1ZtsJSlKiqCnb1jpWHUyMDQt01ZT30tdg6ov21S/UZWnfVWm+sbltlfX8k0Nyv5edf1bLdXIQJRpq6ncDkakl2nz9TRDcQWPgVJXrFjIyieXPx+wVLoOfZlMqIq8pqKjozF//nycOHFCahs0aBDWrFmDDh06qJ02Ozsb9+/f13aKRESvJVtbW5iYmJRpr3V7RK+ifv36sLW1haGhIWQybvUQEWlCCIGioiLUr1+/3HitK0RWVlZISUlBSUkJ9PX1UVJSgtTUVFhZWVU4rZ6eXrnVnIiI1KtTp47KWK0bNdekSRPY2dkhIiICABAREQE7O7sKzw8REZF21LpzRAAQGxuLBQsWICsrCw0bNkR4eDhatWql67SIiGqlWlmIiIjor6PWHZojIqK/FhYiIiLSKRYiIiLSKRYiIiLSKRYiIiLSKRaiSsrIyMDdu3dx9+5dZGRkaHVZz549Uxm7fPlyleebm5uL3377DTk5OZWaLjMzE3fv3sX9+/dRUFBQ5eUTEb2IhUhD8fHxGDduHNzd3REcHIzg4GC4u7tj3LhxGj1GIiMjA4sWLcL777+P3bt3K8VmzJiBe/fuYejQoRg+fDhiY2MRFBSEPn36wMXFBadPn0ZMTIzSv48//hixsbGIiYnBpUuXpHllZ2fjo48+Qv/+/TFjxgykpaVhyZIlSE9/foPHW7duYcCAAZg3bx4GDBiAixcvwtnZGcuXL8fdu3fLzT0hIQETJ05E9+7dMXToUAQGBsLZ2RlhYWHSzQz/7rKyspCVlaX15cTGxlZ52szMzHLbs7KykJubW26spjac1G00AVXfcKpooyk/Px/R0dFl+q6ijSZN+7uq/aWuTyqz/JdVZ39W1GeVXf6rbKjyOiINBQQEYPTo0fDy8oKe3vP6rVAocPz4cezZswfffvut2ukdHR3h7++Pzp07Y+/evahfvz7+9a9/wcDAAEOGDEGDBg0wfvx4ZGdnY8OGDfjwww/h4+ODs2fP4oMPPkDz5s2V7lybkpICCwsLyGQyNGzYEIcPHwYAhIaGQqFQYPTo0Thx4gTi4uLw8OFDHDt2DAAwduxYBAcHo2PHjnj06BHmzp2LzMxM9O/fH8ePH4elpSWGDRsGb29vNGr0/I7UgYGBGDFiBFxcXHDs2DFkZGTg3Xffxbp162BkZISQkBAAz3+kycnJAABLS0s0bty4ejvh/7t8+TLeeeedKk2bn5+P2NhYtGzZEsXFxVi7di0iIyMBPL8flp6eHjw9PREcHIwGDRrgyy+/RGJiIvr164e+fftK81m2bBkmTJiAVatWQU9PD//85z+xZcsWHD16FG3btsWaNWvQpEmTMssfPHgwTp48iQcPHuDtt98GABQVFWHLli346aefYGdnh1mzZmHnzp3w9/dHkyZNEBMTgw8++ABPnjyBqakpPvvsM7Rs2RKffvopjh8/jvz8fACAhYUFJkyYgMDAQMTHx2Px4sW4c+cOzM3NAQCpqalo3749PvnkE7z55psqv6NBgwbBwcEBSUlJ6NevH959910pNmPGDEybNg0LFy6Enp4ewsPDER4ejmvXrsHU1BRbt26FoWHZu7xPmDABO3bsgBACKSkp6NmzJ4DnG06hoaGIioqCnZ0d6tatiwULFsDMzAy3bt3CjBkz0LhxY6Snp2PNmjXIz8/H/PnzYW5ujtWrV2PWrFmoW7cunj59ilWrVqFt27YICQnBxYsXpb+NgoICjBo1CuPHj8eGDRtU9nfdunVV9pcQAn/++SfatGmjss+KiorU9kl6erra39vTp09Vzn/o0KFYsWKFyv5s1KgR1q5dW+U+S09PV9knISEhyMvLU/l7mjp1Kv7973+X+53PmTMHRkZGKn9rpViINOTp6Ynvviv/kdelsZiYGJXT+/j44M6dOwCe/wBDQ0MRHx+PLVu2wN/fHzKZTComrq6u+OGHH6Rpe/bsKf3grK2tAQBubm44e/YsAGDIkCE4cuQIAMDX1xcHDhyQVgbe3t6Qy+U4deoUAGDYsGE4ePCgNG9vb28YGBjg8OHDKCoqwpkzZ3Do0CHcuHEDffv2xfDhwxEeHi4VMgAYPnw4Dhw4AIVCAU9PT2zfvl1rK71Zs2aVmUbTlVpISAiioqJUrrisra3h7u6OgIAAqWimp6dj3759uHXrFiwsLJCfn4+OHTvi4MGD6NGjBxYtWgQA8PPzQ9OmTdG7d2/k5OQgMjISXl5eGDZsGCIjI3HlyhWcPXsWMpms3FvfCyHw+++/AwDWrVuHmJgYjBgxAqdOnYKhoSFu376N48ePAwAmT56M4cOHY8CAAbhx4wY+/fRTNG7cGB07doSLiwuOHz+Oxo0bo3v37ti0aRPefvttXL58We2G04oVK1T2iZ+fHwIDA6u00bRr1y5cvXoVNjY2Vdpw2r17N27evAmg/I0mhUKB8PBwZGVlYfr06fj888/RpUsXxMbGYu7cuTAxMVG50XTp0iX4+/ur7O9Lly6p7C+ZTIZ27dpJeZfXZ2lpaWr75Oeff4aTk5PK5aenp6uc/4ULF7BgwQKV/WlhYYHmzZtXuc+ePXumdmM2OTlZ5e8pNDQUISEhFW6oqiVII/7+/uL48eNCoVBIbQqFQhw9elSMGDFCCCFE27ZthZubm3B1dS3zz9bWtsw8w8LCxNixY4Wnp6fw9fWV2hctWqT0Pm9vb/Hbb78Jf39/sWfPHiGEEG5ublJ84MCBIiYmRjx48EBpPkII4ePjI0JCQsSqVatEXl6eCA8PFydOnBBCCHHx4kUxZswYMWTIkDK5JScni88//1x4eHgIPz8/ERcXJ4QQ4tdffxWjRo1SWra/v784evSoKCkpkdpLSkrEkSNHxMiRI8WDBw9U/rO3txfh4eHi1KlT4r333hPTpk0TRUVFQgghfH19y/1O27dvL1xdXYWbm5tS7p988okICQkRv//+u1i3bp2YNWuW8PX1Fffu3RPXr18X3bp1E7du3RJCCBETEyPs7e3LdvT/5+7uLry8vKTX+fn54oMPPhAff/yxUCgUwtfXV/j4+Ejxnj17lumzBQsWiIULF4rs7Gyp3dXVVfpspYYMGSJycnKEEEIUFRWJwYMHC3d3dynu5+enNG9fX1+l3IQQYuTIkUIIIQoKCoS7u7vw8PBQ+dk8PDw0/q0qFAqxdOlS8f7774uCggLh6+ur9J337du3TG6bNm0SEydOFAkJCWU+98uf3cfHR8jlcul1hw4dpP8PHTpUad5eXl5K0744z9L5ent7K7UNGzZMCPH899i+fXuV34m7u7va/no57/L67FX6xN3dXe38X/xeXubh4aH0uavSZ+r6xMvLS23uL/8dvfidDxgwQOV0L+I5Ig2FhYVh//79cHZ2hre3N7y9veHs7IwDBw4gLCwMAGBjY4M9e/bg7NmzZf4ZGxvjxo0bSvOcP38+OnXqhMePH8PGxkY6Dr58+XLpPcnJyahbty7at2+PXbt2ISEhAe+99x6Kiv7vCbEFBQUICgpCUFAQsrKykJKSAgDIycmBnp4eFi5ciOLiYvTp0wfff/895syZA3t7e+zYsQMrV64sdwvQwsICU6ZMwXfffYeZM2di5MiR8Pb2xsSJEzFjxgwAQFpaGrp06YLMzEz4+PhIW0rA8zuV+/r64tmzZ/Dy8sLkyZOlHF/8J5fLMW/ePLi7u2PHjh1o1qwZJk+eLD0cbfr06WjVqhX+85//SN+lhYUFzp49izNnzijlfuvWLSxatAi2trb48MMPpeP7bdu2RdeuXVG/fn106dIFANC6dWvIZDJERUWV+ew//fQTjIyMUFLyf49+r1OnDjZt2oT8/Hx89NFHUCgUSo8Cad++vdI8ZDIZVq1ahf79++O9997DhQsXpHbg+R5RQUEB8vPzoa+vL90e38DAAAYGBrC3t8c333wDALCzs8NPP/0EAIiJiZEeQ1J6zighIQEKhQIAYGxsDAMDA5iamiIiIkLp+xFC4NixY2jYsKHa36q+vr7S5wgJCYGtrS2CgoJQWFioNM/SvdFSCoUC06dPx4cffog5c+Zg7969Sp8beP6QtNLzmzKZTOlQXv369REWFob8/Hw4Ozvj5MmTAIBLly7B1NQUMpkMsbGxiIqKQl5eHm7fvg0AePToEUpKSmBgYID4+HgAz589VnpYSE9PD3p6emr7W11/adJnFfWJsbGx2uVXNH91/fni+qAqfaauT/T09NT+nvT19VV+5wblPJSxPLXuMRBV9eabb+Lrr79Geno6kpKSADx/pMSLd+12d3dHQkICLCwsykzv6+sLW1vbMu1z5syBj48P/vGPf5S73IYNG2LLli0AACMjIwQHB+P27du4fv269J7SQ3Qv09fXx8aNG2FkZIR//vOfmDNnDuLj46FQKGBlZSUdHti8ebPaz963b1+cPn0acXFxeOutt9CgQQMAQNOmTbF8+XIEBAQgIiICgwcPVlrRHj9+XGmlV9738uIKvPQPKDw8XPoDmj59Ou7cuYM5c+bA19cXo0aNKnelJoQo9w+odMWVlZUlrbg6d+6MR48ewdzcHPPnz4exsTFsbGwAPF+BFBYWIjw8HOvXr8e9e/fQrl076fv89NNPMX/+fDx48ACdOnVCTk4OGjRogG3btknLzcjIkFbmrq6u6Ny5M5YtW4aTJ09Kxe3333+Hg4ODlHfpoavCwkIoFAosWbIECxYswFdffQULCwuMHTsWVlZWqFu3LlauXInff/8dPj4+aN++PX799VfpkGFaWhqsra2xaNEihISEIDQ0FBYWFtJhTDs7O2mjStVv1dLSEjdu3EDXrl2ltvnz52PdunXYtm0b+vXrJ33u8jaaSvt1165d2LhxY7kbTpMmTZJel372nJwcWFpaShtNpqam2LFjB+bNmwdnZ2esXLkSMTExGDVqFPT09LB+/Xps2LABqampSElJwdKlS9GgQQOMHDkSzZo1w5MnT7B+/Xrpe+nVq5fK/l69enWZ/jpx4oTSxkhFfTZu3Di1fTJt2jTMmzdP5fIDAgJUzt/S0hL79+9X6s/U1FS0a9cOYWFhCAsLe6U+e/LkCYKCgqRC82Kf6OnpYdWqVVi6dKm0/NL3tGvXDgsWLFD5nZdu+FWE54jolT1+/BghISG4e/dumR/p0qVLsX//fgwYMKDcH6WbmxvCw8OV/oAASH9A9+7dA/C84GzcuBHR0dF4+PChtMXq5uamdFx/79690h9QYGAgZs6cifnz50srrm3btuHJkydITk5GSEgIvLy8EB0drbRxYW9vD5lMhsePH8PIyEg6L1dKCIELFy6gT58+5T4gMT09HWlpaWU2PE6ePIkbN26oPWaelZWFhw8fonPnzgCAuLg4xMTESBsP9vb20ntjY2Px4MEDtGvXTuV5OHUbTi979uwZGjVqhMzMTOjp6aFhw4ZlYjExMeVuND179gyGhobIz88vM0jj9u3buHbtGiZPnqx22cbGxnjy5AlatGiBvLw8aaPJ0tJSZd4lJSX47bffYG1tjaZNmwJ4/h2+uNFUmjvwvO9e7O/4+HhMmDCh3H48efIktmzZIj0ypjyXL1/G22+/jdjYWHTu3LlMn7w8sObl5VtbW6NDhw5qH7SZnZ0tzb+0P/Py8mBsbIxWrVqhQYMGyMzMhEwmkz5nbm4uHj9+jDfeeAPJycll+qw03rRpUxgYGJTps9J4s2bNUFhYiBYtWgBQ/Xsq/c4LCgrQqFEjtGzZUu3zh8rQ6AAekQaePn0qoqOjRXR0tHj69KlG02RkZIjMzMxyYw8ePCjTFhUVJb744osK55uXlyf++OOPMu3FxcXi119/FU+ePBHp6eli0aJFYvz48eKbb75Ret/06dNFenq6WLhwoRg/frz4z3/+ozZe2emDgoKkZauad0W5qZv+7t27ws/PTwwbNkzExMSISZMmiY4dO4o+ffqIO3fuqI1HRkaqjN29e1fttBXFX1z28OHDy8RPnjxZJtapUyeNpq1o2adOnVI6P3n//n3Rp08f6fzqy/8qij948KBS8YsXL0p9lJWVJYKDg0W/fv3EjBkzxJMnT5Ti2dnZUnz69Onio48+kv6mbt68KXr06CEGDx4sunfvLn788UexePHiMvFBgwZVKX7r1q0y8W7duolly5aJu3fvlvmb+vPPP8WECRNE27ZtRbt27US3bt1Ex44dxapVq0RhYWGZ95eHe0SkVd7e3tLor8rGX2VaTeIVDalv2bKlypFIfn5+aNGihdqRSuqmd3JywsiRI7Uyb01GSRUXF6uMz5s3D+Hh4VWa9lXj2lx2RZdBJCQklBntl5qaCnNzc5XxiqavzGUWcXFxUvyTTz6BEELj0YTFxcVqL9F41bi6Szw0vbxDLY3KFZEaqrYG79+/L3r27Kl21Jyzs7PKWEXTvmrczs5O+gzljTSqaCTSq8TffvttrS67olFS6uIv5lbZaf/Ky37nnXfUjuaraLTfq8YrGpn2KqMJXxxlqY146fcql8tFZGSkmDRpkujcubOYPXu20gheIao2ao6DFeiVeXl5ldkSLJWZmak2npGRgcmTJ1dp2leNv3giuryBEi+q7njpiCptLdvY2FiKlzdK6sURji/HX1TZaV81rs1lN2nSRBrNV97Al4oGxrxqvKKBNeripaMJZ82aJY0mHDRokDSasHXr1lqNl47oNTQ0hKenJzw9PZGSkoLDhw/jf//7H+Lj49GyZcsqj5rjHhG9Mjc3N5GcnFxurE+fPmrjdnZ2VZ72VeNvv/22uH79epn2Tz/9VLRr105MmjRJa3FbW1utLnvq1KlK18OUSkpKEiNHjlQb79q1a5WnfdW4tpcthBCFhYVizZo1Yty4caJ3795l3quteOm1b6XXa5X+LrOzs8WQIUPUxn18fMSyZcuEk5OT6N+/v2jbtq3o0KGDeP/990V8fLwoLCzUavzl6xNf9MMPPwhnZ2fh5eUlnJ2dxeXLl4UQQjx58qTMNZGq8BwRvbLw8HCVo+KWL18OQ0NDlXE/Pz8sXry4StO+anzx4sUIDg6WRhq9KCYmBk2bNlUaiVSd8aioKLRq1Upry1Z1OUBeXl65I9s0ib/KtH/FZZdeBhEUFFTuNNqOl8rPz0daWpo0Mk1d/MXRhC9egvHi59RGvPT8lyovj1SsLBYiIiLSKd5ZgYiIdIqFiIiIdIqFiOhvKjAwEPv376/0dIMHD8a1a9eqtMyJEydK17oQVRcWIqJKunnzJgICAuDo6Ihu3bohICAAv/zyi67TUrJp0yYEBweXGztx4gScnZ2rNN/t27fDz88PAHDo0CGMGjWqyjkSleJ1RESVkJOTgylTpmDp0qUYOHAgioqKcPPmTY0e/kVE5eMeEVElPHr0CMDzi3j19fVRp04d9OrVS7pD96FDhxAQEIDQ0FA4OjrC09MTV65ckabPzs7GwoUL0atXL/Tu3Rvr169XurD2wIEDGDhwILp27YoJEyYgISFBil26dAmenp5wdHREaGhouRfpasLNzU16dPemTZswc+ZMBAcHw8HBAd7e3nj06BG++OIL9OjRAy4uLrh48aI0benhwNjYWISEhOD27dtwcHCAk5MTAOD8+fPSww579+6NL7/8sko5Uu3CQkRUCW+99Rb09fUxf/58nD9/Hs+ePSvznl9++QUtW7bE1atXMXPmTEyfPl16Ts2CBQtgYGCA06dP48iRI7h06ZJ0nud///sfvvjiC3z22We4cuUKHB0dMXfuXADP73o8ffp0zJ49G1evXkXLli2lZxS9qh9++AG+vr64ceMG7OzsMGHCBCgUCly4cAHTpk3DkiVLykzTunVrfPLJJ+jcuTOioqKk+6AtWrRIekpuREQEunfvXi050uuNhYioEho0aIA9e/ZAJpNh8eLF6NGjB6ZMmYK0tDTpPWZmZhg3bhwMDQ0xaNAgvPXWWzh37hzS0tJw/vx5LFy4EPXq1UOTJk3w3nvv4cSJEwCAffv2ISgoCK1bt4aBgQGmTJmCu3fvIiEhARcuXECbNm3g6ekJQ0NDjBs3TnrswatycnJC7969YWBgAE9PT2RkZCAoKEjKPyEhAVlZWRrNy8DAADExMcjJyUGjRo3QoUOHasmRXm8sRESVVHpfrgsXLuD48eNITU3FypUrpXjp3ZZLWVtbIzU1FYmJiSguLkavXr3g5OQEJycnLFmyBOnp6QCAxMRErFy5Uop169ZNeqBdamoqLC0tpXnKZDJYWVlVy+d58W4DderUQePGjaUH+5U+UyYvL0+jeW3cuBHnz5+Hq6srxowZU+4TSYlexsEKRK+gdevWGDp0KL799lupLSUlRbpxJQAkJSXBzc0NlpaWMDIywtWrV8u9GaSVlRWmTJkCHx+fMrG4uDgkJydLr4UQ0gPKdKW8h7l17NgRn3/+OYqKirB7927Mnj0b58+f10F29HfCPSKiSoiNjcWOHTukopCUlISIiAh06tRJek96ejp27dqFoqIiREZGIjY2Fi4uLjA3N0fPnj0RFhaGnJwcKBQKxMfHS499DwgIwLZt2/DgwQMAzwc2REZGAgBcXFzw4MEDnD59GsXFxdi1a5fS4cDyCCFQWFgo/ZPL5dX6XTRp0gQpKSnSfOVyOY4dO4bs7GwYGhqifv36SnfDJlKFe0REldCgQQP8/PPP2LlzJ7Kzs2FiYgJXV1fMmzdPek/Hjh0RFxeH7t27o2nTpti4caN088jVq1dj7dq1GDRoEHJzc9GiRQtMmjQJADBgwADk5uZizpw5SEhIgImJCd555x0MHDgQZmZm2LBhA1asWIGPP/4Yvr6+5d7I9UURERFKj7m2sLCQHrFeHbp3745//OMf6NWrF2QyGX788UccPXoUy5YtQ0lJCd566y2sWbOm2pZHry/e9JSoGh06dAj79+/H3r17dZ0K0d8G95uJiEinWIiIiEineGiOiIh0intERESkUyxERESkUyxERESkUyxERESkUyxERESkUyxERESkU/8PcP+zuJceNLgAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
